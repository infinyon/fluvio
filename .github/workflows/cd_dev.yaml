# This workflow test deployment of latest dev release
name:  CD_Dev

permissions:
  contents: read

concurrency: 
  group: ${{ 'cd_dev' }}
  cancel-in-progress: true

on:
#  push:
#    branches: [master]
#  pull_request:
#    branches: [master]
  workflow_run:
    workflows: [Publish]
    branches: [master]
    types: [completed]
  workflow_dispatch:
    inputs:
      alt_version:
        required: false
        description: Provide expected semver for `installer_check` job. If empty `VERSION+<git commit>` in repo will be used
        default: ''

env:
  USE_VERSION: ${{ github.event.inputs.alt_version }}


jobs:
  # test fluvio in local cluster 
  verify_latest_releases:
    name: Verify latest (${{ matrix.cluster_type }}) on (${{ matrix.os }}), 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest,macos-latest]
        cluster_type: [local,k8]
    env:
      SLEEP: 10
      TOPIC: foobar
      FLV_SOCKET_WAIT: 600

    steps:
      - uses: actions/checkout@v2
      - name: Install Fluvio CLI
        run: curl -fsS https://packages.fluvio.io/v1/install.sh | VERSION=latest bash
      - name: Set up K3d for Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: nolar/setup-k3d-k3s@v1        
      - name: Set up K8 for ubuntu(kind)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: ./k8-util/cluster/reset-k3d.sh
      - name: Set up Minikube for Mac
        if: ${{ matrix.os == 'macos-latest' }}
        run: ./k8-util/cluster/start-minikube-mac.sh
      - name: Create Fluvio cluster and run E2E Test
        env:
          FLV_DISPATCHER_WAIT: 300  
        timeout-minutes: 5
        run: |
            export PATH=~/.fluvio/bin:$PATH
            if [[ ${{ matrix.cluster_type }} == 'local' ]]; then
              echo "Installing local cluster"
              fluvio cluster delete
              fluvio cluster start --local
            else
              echo "Installing k8 cluster"
              fluvio cluster delete
              fluvio cluster start --image-version latest
            fi
            sleep 30
            fluvio version
            fluvio topic create ${{ env.TOPIC }}
            echo foo | fluvio produce ${{ env.TOPIC }}
            fluvio consume ${{ env.TOPIC }} -o 0 -d | grep -F -w "foo"
            # Delete the topic afterword but this looks to not work right now.
            # fluvio topic delete "${{ env.TOPIC }}"

      - name: Debug failure
        if: failure()
        run: |
          lscpu
          kubectl get pods
          kubectl get pvc
          kubectl get svc
          kubectl get topics
          kubectl get partitions
          kubectl get spu

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


  # Perform upgrade test from previous stable version to latest
  k8_cluster_upgrade:
    name: Kubernetes cluster upgrade test
   # if: false
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]

    env:
      FLV_SOCKET_WAIT: 600
    steps:
      - uses: actions/checkout@v2
      - name: Setup K3d
        run: |
          curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
          ./k8-util/cluster/reset-k3d.sh 
      - name: Run upgrade test
        timeout-minutes: 10
        env:
          TEST_DATA_BYTES: 10000
          FLV_DISPATCHER_WAIT: 300 
        run: |
            export PATH=~/.fluvio/bin:$PATH
            USE_LATEST=true make upgrade-test
      - name: Save logs
        if: failure()
        run: |
          helm list
          kubectl get statefulset
          kubectl get pvc
          kubectl get pods
          kubectl get svc
          kubectl get spu
          kubectl get spg
          kubectl logs -l app=fluvio-sc > /tmp/flv_sc.log
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Verify latest version of CLI
  installer_check:
    name: Installer check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        version: [latest]
    steps:
      - uses: actions/checkout@v2
      - name: Set the expected fluvio version
        run: |
          if [[ -z "${{ env.USE_VERSION }}" ]]; then
            echo "EXPECTED_VERSION=$(cat VERSION)+$(git rev-parse HEAD)" | tee -a $GITHUB_ENV
          else
            echo "EXPECTED_VERSION=${{ github.event.inputs.alt_version }}" | tee -a $GITHUB_ENV
          fi
          echo "EXPECTED_VERSION: $EXPECTED_VERSION"

      - name: Curl Install - latest 
        if: matrix.version == 'latest'
        run: echo "VERSION=latest" | tee -a $GITHUB_ENV

        # Utilizes the env var set in the previous step 
      - name: Curl Install
        run: curl -fsS https://packages.fluvio.io/v1/install.sh | bash | tee /tmp/installer.version

      - name: Verify installer output
        run: |
            INSTALLER_VERSION=$(cat /tmp/installer.version | grep "Downloading Fluvio" | awk '{print $5}')
            if [ "$INSTALLER_VERSION" = "$EXPECTED_VERSION" ]; then
              echo "✅ Installer version check passed: $EXPECTED_VERSION";
            else
              echo "❌ Installer version check failed";
              echo "Version reported by installer: $INSTALLER_VERSION";
              echo "Expected version: $EXPECTED_VERSION";
              exit 1;
            fi

  cli-platform-cross-version-test:
    name: CLI (${{ matrix.cli_version }}) x Platform (${{ matrix.cluster_version }}) version test 
    #if: false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cluster_version: [stable, latest]
        cli_version: [stable, latest]
    steps:
      - uses: actions/checkout@v2
      - uses: nolar/setup-k3d-k3s@v1
      - name: CLI ${{ matrix.cli_version }} x Cluster ${{ matrix.cluster_version }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            make CLI_VERSION=${{ matrix.cli_version }} CLUSTER_VERSION=${{ matrix.cluster_version }} cli-platform-cross-version-test