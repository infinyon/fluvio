# This workflow test deployment of latest dev release
name:  CD_Dev

permissions:
  contents: read

concurrency: 
  group: ${{ 'cd_dev' }}
  cancel-in-progress: true

on:
#  push:
#    branches: [master]
#  pull_request:
#    branches: [master]
  workflow_run:
    workflows: [Publish]
    branches: [master]
    types: [completed]
  workflow_dispatch:

jobs:
  # test fluvio in local cluster 
  verify_latest_releases:
    name: Verify latest (${{ matrix.cluster_type }}) on (${{ matrix.os }}), 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cluster_type: [local,k8]
    env:
      SLEEP: 10
      TOPIC: foobar
      FLV_SOCKET_WAIT: 600

    steps:
      - uses: actions/checkout@v2
      - name: Install Kind
        run: |
          curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
      - name: Install Fluvio CLI
        run: |
          curl -fsS https://packages.fluvio.io/v1/install.sh | VERSION=latest bash
      - name: Create Fluvio cluster and run E2E Test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 7
          max_attempts: 3
          command: |
            k3d cluster delete fluvio
            k3d cluster create fluvio
            export PATH=~/.fluvio/bin:$PATH
            if [[ ${{ matrix.cluster_type }} == 'local' ]]; then
              echo "Installing local cluster"
              fluvio cluster start --local
            else
              echo "Installing k8 cluster"
              fluvio cluster start --image-version latest
              
            fi
            sleep 30
            fluvio version
            sleep ${{ env.SLEEP }}
            fluvio topic create ${{ env.TOPIC }}
            sleep ${{ env.SLEEP }}
            echo foo | fluvio produce ${{ env.TOPIC }}
            sleep ${{ env.SLEEP }}
            fluvio consume ${{ env.TOPIC }} -o 0 -d | grep -F -w "foo"
            # Delete the topic afterword but this looks to not work right now.
            # fluvio topic delete "${{ env.TOPIC }}"

      - name: Debug failure
        if: failure()
        run: |
          lscpu
          kubectl get pods
          kubectl get pvc
          kubectl get svc
          kubectl get topics
          kubectl get partitions
          kubectl get spu

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


  # Perform upgrade test from previous stable version to latest
  k8_cluster_upgrade:
    name: Kubernetes cluster upgrade test
   # if: false
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]

    env:
      FLV_SOCKET_WAIT: 600
    steps:
      - uses: actions/checkout@v2
      - name: Install Minikube for Github runner
        if: matrix.os == 'ubuntu-latest'
        uses: manusa/actions-setup-minikube@v2.4.2
        with:
          minikube version: "v1.22.0"
          kubernetes version: "v1.21.2"
      - name: Test minikube
        run: |
          minikube profile list
          minikube status
      - name: Run upgrade test
        env:
          TEST_DATA_BYTES: 10000
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            ./k8-util/cluster/reset-minikube.sh 
            export PATH=~/.fluvio/bin:$PATH
            USE_LATEST=true make upgrade-test
      - name: Save logs
        if: failure()
        run: |
          echo "minikube profile list"
          minikube profile list
          echo "helm list"
          helm list
          echo "get statefulset"
          kubectl get statefulset
          echo "kubectl get pvc"
          kubectl get pvc
          echo "kubectl get pods"
          kubectl get pods
          echo "kubectl get svc"
          kubectl get svc
          echo "kubectl get spu"
          kubectl get spu
          echo "kubectl get spg"
          kubectl get spg
          kubectl logs -l app=fluvio-sc > /tmp/flv_sc.log
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}