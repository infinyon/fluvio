name: Publish

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      force:
        required: false
        description: "Set --force to force push this release"
        default: ""
      verbose:
        description: "Set --verbose to get verbose build output"
        required: false
        default: ""
      installer_version:
        required: false
        description: "The version of Fluvio to download with install.sh"
        default: ""

env:
  VERBOSE: ${{ github.events.input.verbose }}
  FORCE_RELEASE: ${{ github.events.inputs.force }}

jobs:
  # Re-tag the docker image for this commit as 'latest'
  docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        run: docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
      - name: Publish latest development Fluvio Image
        run: |
          export VERSION="$(curl -fsS https://raw.githubusercontent.com/infinyon/fluvio/${{ github.sha }}/VERSION)"
          export TAG="${VERSION}-${{ github.sha }}"
          docker manifest create "docker.io/infinyon/fluvio:latest" \
            "docker.io/infinyon/fluvio:${TAG}-amd64" \
            "docker.io/infinyon/fluvio:${TAG}-arm64v8" 
          docker manifest push "docker.io/infinyon/fluvio:latest"

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  
  # Download the `fluvio` release artifact for each target and publish them to packages.fluvio.io
  fluvio:
    name: Publish Fluvio CLI
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Login GH CLI
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
      - name: Install fluvio-package
        run: |
          if [ -n "${{ github.event.inputs.installer_version }}" ]; then
              export VERSION=${{ github.event.inputs.installer_version }}
              echo "VERSION=$VERSION"
          fi
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash
          ${HOME}/.fluvio/bin/fluvio install fluvio-package

      - name: Download dev release
        run: gh release download dev -R infinyon/fluvio

        # Publish artifacts from GH Releases to Fluvio Packages
        #
        # Artifacts from GH Releases look like this:
        #
        # ./
        #   ARTIFACT-TARGET.zip, such as:
        #   fluvio-x86_64-unknown-linux-musl.zip
        #   fluvio-aarch64-unknown-linux-musl.zip
        #   fluvio-x86_64-apple-darwin.zip
        #
        # Here, we extract each zip into dirs with the same name.
        # Then, we get the TARGET from the `.target` file inside.
        #
        # ./
        #   ARTIFACT-TARGET.zip
        #   ARTIFACT-TARGET/
        #     ARTIFACT
        #     .target
        #   fluvio-x86_64-unknown-linux-musl.zip
        #   fluvio-x86_64-unknown-linux-musl/
        #     fluvio
        #     .target
      - name: Publish artifacts
        run: |
          export VERSION="$(curl -fsS https://raw.githubusercontent.com/infinyon/fluvio/${{ github.sha }}/VERSION)"

          for ZIP_FILE in ./*.zip; do
            # Don't publish `fluvio-test` artifact outside of github
            [ "$ZIP_FILE" = "./fluvio-test-x86_64-unknown-linux-musl.zip" ] && echo "Skipping fluvio-test" && continue

            # Unzip all .zip files into directories with the same name (minus .zip)
            UNZIP_DIR="${ZIP_FILE//.zip/}"
            echo "Unzipping $ZIP_FILE into $UNZIP_DIR"
            unzip "$ZIP_FILE" -d "$UNZIP_DIR"

            TARGET="$(cat ${UNZIP_DIR}/.target)"
            ARTIFACT="$(echo ${UNZIP_DIR} | sed -e "s/-$TARGET$//")"
            PACKAGE="$(echo ${ARTIFACT} | sed -e "s/^\.\///" -e "s/\.exe$//")"
            echo "TARGET=$TARGET"
            echo "ARTIFACT=$ARTIFACT"
            echo "PACKAGE=$PACKAGE"

            ${HOME}/.fluvio/bin/fluvio package publish \
              --package="${PACKAGE}" \
              --version="${VERSION}+${{ github.sha }}" \
              --target="${TARGET}" \
              "${UNZIP_DIR}/${ARTIFACT}"
          done

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Bump the latest version of the Fluvio CLI on the package registry
  # This serves as the final step in the publishing process, and therefore
  # depends on all other jobs to have completed successfully.
  # If the 'latest' tag gets bumped, you can be sure the whole publish flow succeeded.
  bump_fluvio:
    name: Bump Fluvio CLI version
    needs: [docker, fluvio]
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install cargo-make
        uses: davidB/rust-cargo-make@v1
        with:
          version: "0.32.9"
      - name: Bump latest version of Fluvio CLI on fluvio-packages
        env:
          RUST_LOG: info
        run: cargo make bump-fluvio-latest

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
