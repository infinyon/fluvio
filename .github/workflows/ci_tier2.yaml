# CI for Tier2 platforms
# This should not block CI or Release

name: CI_Platform_Tier2

permissions:
  contents: read

concurrency:
  group: ${{ 'ci_tier2' }}
  cancel-in-progress: true

on:
  pull_request:
    branches: [master]
#  push:
#    branches: [master]
  workflow_dispatch:
    inputs:
      verbose:
        description: "Set --verbose to get verbose build output"
        required: false
        default: ""

env:
  VERBOSE: ${{ github.events.input.verbose }}

jobs:

  # Run all checks and unit test. This always run on debug mode
  check:
    name: Check tier2 platform (${{ matrix.rust_target }}) (${{ matrix.check }})
    if: ${{ !(github.event_name == 'push' && github.ref == 'refs/heads/staging') }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        rust: [stable]
        rust_target: [x86_64-apple-darwin]
        check: [clippy, test, unstable]

    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust_target }}
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - uses: goto-bus-stop/setup-zig@v1
        with:
          version: 0.8.0
      - uses: Swatinem/rust-cache@v1
      - name: Clippy
        if: ${{ matrix.check == 'clippy' }}
        run: make check-clippy

      - name: Test
        if: ${{ matrix.check == 'test' }}
        run: |
          make run-all-doc-test
          make run-all-unit-test

      - name: Unstable test
        if: ${{ matrix.check == 'unstable' }}
        run: |
          make run-integration-test

  # build binaries. use release for staging
  # this requires check and test
  build_platform_binaries:
    name: Build Tier2 binaries for Platform Target (${{ matrix.rust_target }}) on ${{ matrix.os }}
    if: ${{ !(github.event_name == 'push' && github.ref == 'refs/heads/staging') }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        rust: [stable]
        rust_target: [x86_64-apple-darwin]

    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust_target }}
      RUST_BIN_DIR: target/${{ matrix.rust_target }}/debug
      RELEASE_NAME: debug
    steps:
      - uses: actions/checkout@v2

      # If this job is being run by Bors (it was pushed to staging),
      # then build and run in release mode
      #- name: Set RELEASE mode
      #  if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
      #  run: |
      #    echo "RELEASE=true" | tee -a $GITHUB_ENV
      #    echo "RELEASE_NAME=release" | tee -a $GITHUB_ENV
      #    echo "RUST_BIN_DIR=target/${{ matrix.rust_target }}/release" | tee -a $GITHUB_ENV

      - name: Print env
        run: |
          echo "RUST_BIN_DIR = ${{ env.RUST_BIN_DIR }} "
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - uses: goto-bus-stop/setup-zig@v1
      - uses: Swatinem/rust-cache@v1

      - name: Rustfmt
        run: make check-fmt

      - name: Build CLI
        run: make build-cli

      - name: Build minimal cli
        run: make build-cli-minimal

      - name: Build Cluster CLI
        run: make build-cluster

      - name: Build Test CLI
        run: make build-test

      # Upload artifacts
      - name: Upload artifact - fluvio
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-tier2-${{ matrix.rust_target }}
          path: ${{ env.RUST_BIN_DIR }}/fluvio
      - name: Upload artifact - fluvio-run
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-tier2-run-${{ matrix.rust_target }}
          path: ${{ env.RUST_BIN_DIR }}/fluvio-run
      - name: Upload atrifact - flv-test
        uses: actions/upload-artifact@v2
        with:
          name: flv-tier2-test-${{ matrix.rust_target }}
          path: ${{ env.RUST_BIN_DIR }}/flv-test

  local_cluster_test:
    name: Local Tier 2cluster test
    runs-on: ${{ matrix.os }}
    if: ${{ false }}
    needs: build_platform_binaries
    strategy:
      matrix:
        os: [macos-latest]
        rust: [stable]
    env:
      FLV_SOCKET_WAIT: 600
    steps:
      - uses: actions/checkout@v2
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Set up Minikube
        env:
          OSTYPE: darwin
          MINIKUBE_VERSION: 1.21.0
        run: ./actions/action-install-minikube.sh
      - name: Test minikube
        run: |
          minikube profile list
          minikube status
      - name: Download artifact - fluvio
        uses: actions/download-artifact@v2
        with:
          name: fluvio-x86_64-unknown-linux-musl
          path: .
      - name: Download artifact - flv-test
        uses: actions/download-artifact@v2
        with:
          name: flv-test-x86_64-unknown-linux-musl
          path: .
      - name: Print artifacts and mark executable
        run: ls -la . && chmod +x ./fluvio ./flv-test && ./fluvio -h && ./flv-test -h
      - name: Run smoke-test
        timeout-minutes: 3
        run: |
          make FLUVIO_BIN=./fluvio TEST_BIN=./flv-test UNINSTALL=noclean smoke-test-tls-root
      - name: Upload SC log
        uses: actions/upload-artifact@v2
        timeout-minutes: 5
        if: failure()
        with:
          name: fluvio-sc-logs
          path: /tmp/flv_sc.log