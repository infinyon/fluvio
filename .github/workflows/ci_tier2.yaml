# CI for Tier2 platforms
# This should not block CI or Release

name: CI_Platform_Tier2

permissions:
  contents: read

concurrency:
  group: ${{ 'ci_tier2' }}
  cancel-in-progress: true

on:
  pull_request:
    branches: [master]
#  push:
#    branches: [master]
  workflow_dispatch:
    inputs:
      verbose:
        description: "Set --verbose to get verbose build output"
        required: false
        default: ""

env:
  VERBOSE: ${{ github.events.input.verbose }}

jobs:
  
  config:
    name: Set up Config
    runs-on: ubuntu-latest
    env:
      ENABLE_CHECK: true
      TEST_RUNS: "[r1]"   # default runs
    outputs:
      check: ${{ steps.check.outputs.check }}
      runs: ${{ steps.runs.outputs.runs }}
    steps:
      - id: check
        run: echo "::set-output name=check::${{ env.ENABLE_CHECK }}"

  # Run all checks and unit test. This always run on debug mode
  build_primary_binaries:
    name: Primary build ${{ matrix.binary }} for ${{ matrix.rust-target }} on (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust-target:
          - aarch64-apple-darwin
        rust: [stable]
        binary: [fluvio, fluvio-run, fluvio-test]
        os: [ubuntu-latest]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
      RUST_BIN_DIR: target/${{ matrix.rust-target }}/debug
      RELEASE_NAME: debug
    steps:
      - uses: actions/checkout@v2

      # If this job is being run by Bors (it was pushed to staging),
      # then build and run in release mode
      - name: Set RELEASE mode
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        shell: bash
        run: |
          echo "RELEASE=true" | tee -a $GITHUB_ENV
          echo "RELEASE_NAME=release" | tee -a $GITHUB_ENV
          echo "RUST_BIN_DIR=target/${{ matrix.rust-target }}/release" | tee -a $GITHUB_ENV

      - name: Print env
        run: |
          echo "RUST_BIN_DIR = ${{ env.RUST_BIN_DIR }} "
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Install zig
        run: ./actions/zig-install.sh ${{ matrix.os }}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.os }}-${{ env.RUST_BIN_DIR }}-${{ matrix.binary }}

      - name: Build fluvio
        if: ${{ matrix.binary == 'fluvio' }}
        run: make build-cli

      - name: Build fluvio-run
        if: ${{ matrix.binary == 'fluvio-run' }}
        run: make build-cluster

      - name: Build fluvio-test
        if: ${{ matrix.binary == 'fluvio-test' }}
        run: make build-test

      # Upload artifacts
      - name: Upload artifact - ${{ matrix.binary }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.binary }}-${{ matrix.rust-target }}
          path: ${{ env.RUST_BIN_DIR }}/${{ matrix.binary }}

  local_cluster_test:
    name: Local cluster test run (${{ matrix.run }})-${{ matrix.test }}
    runs-on: ${{ matrix.os }}
    needs:
      - build_primary_binaries
      - config
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11]
        run: [r1]
        test: [smoke,election,multiple-partition,reconnection]
     #   run: ${{ fromJson(needs.config.outputs.runs )}}

    steps:
      - uses: actions/checkout@v2
      - name: Download artifact - fluvio
        uses: actions/download-artifact@v2
        with:
          name: fluvio-aarch64-apple-darwin
          path: .
      - name: Download artifact - fluvio-run
        uses: actions/download-artifact@v2
        with:
          name: fluvio-run-aarch64-apple-darwin
          path: ~/.fluvio/extensions
      - run: chmod +x ~/.fluvio/extensions/fluvio-run
      - name: Download artifact - fluvio-test
        uses: actions/download-artifact@v2
        with:
          name: fluvio-test-aarch64-apple-darwin
          path: .
      - name: Print artifacts and mark executable
        run: chmod +x ./fluvio ./fluvio-test && ./fluvio version
      - name: Set up Docker for Mac
        uses: docker-practice/actions-setup-docker@master
      - name: Install and start Kind
        run: |
          brew install kind
          kind create cluster --config k8-util/cluster/kind.yaml 
      - name: Run smoke-test
        if: ${{ matrix.test == 'smoke' }}
        timeout-minutes: 2
        run: |
          date
          make  FLUVIO_BIN=./fluvio TEST_BIN=./fluvio-test UNINSTALL=noclean EXTRA_ARG=--cluster-start smoke-test-tls-root
          date
          kubectl get partitions
          kubectl get partitions  -o=jsonpath='{.items[0].status.leader.leo}' | grep 100
          echo "smoke test done"
      #    make  RUST_LOG=fluvio_test=debug,fluvio_test=debug,fluvio_socket=trace,fluvio::consumer=debug,fluvio::producer=debug DEFAULT_ITERATION=10 DEFAULT_SPU=1 REPL=1 FLUVIO_BIN=./fluvio TEST_BIN=./fluvio-test UNINSTALL=noclean smoke-test-local
      - name: Run election-test
        if: ${{ matrix.test == 'election' }}
        timeout-minutes: 3
        run: |
          date
          make  FLUVIO_BIN=./fluvio TEST_BIN=./fluvio-test UNINSTALL=noclean EXTRA_ARG=--cluster-start election-test
          echo "election test done"
      - name: Run multiple-partition-test
        if: ${{ matrix.test == 'multiple-partition' }}
        timeout-minutes: 3
        run: |
          date
          make  FLUVIO_BIN=./fluvio TEST_BIN=./fluvio-test UNINSTALL=noclean EXTRA_ARG=--cluster-start multiple-partition-test
          echo "multiple partition test done"
      - name: Run reconnection-test
        if: ${{ matrix.test == 'reconnection' }}
        timeout-minutes: 3
        run: |
          date
          make  FLUVIO_BIN=./fluvio TEST_BIN=./fluvio-test UNINSTALL=noclean EXTRA_ARG=--cluster-start reconnection-test
          echo "reconnection test done"

      - name: Save logs
        if: failure()
        run: |
          date
          uname -a
          kubectl get spu
          kubectl get statefulset
          kubectl get topics
          kubectl get partitions
          ps -ef | grep fluvio

      - name: Upload Logs
        uses: actions/upload-artifact@v2
        timeout-minutes: 5
        if: failure()
        with:
          name: local-${{ matrix.run }}-logs
          path: /tmp/*.log