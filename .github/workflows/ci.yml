name: CI

permissions:
  contents: read

on:
  push:
    branches:
      - staging
      - trying
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      verbose:
        description: "Set --verbose to get verbose build output"
        required: false
        default: ""
      upgrade:
        description: "Set --upgrade to test upgrade"
        required: false
        default: ""

env:
  VERBOSE: ${{ github.events.input.verbose }}
  UPGRADE: ${{ github.events.inputs.upgrade }}

jobs:
  cancel_previous_runs:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

  # build binaries. use release for staging
  # this requires check and test
  build_platform_binaries:
    name: Build binaries for Platform Target (${{ matrix.rust_target }}) on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        rust_target: [x86_64-unknown-linux-musl]

    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust_target }}
      SCCACHE_CACHE_SIZE: 2G
      RUST_BIN_DIR: target/${{ matrix.rust_target }}/debug
      RELEASE_NAME: debug
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
    steps:
      - uses: actions/checkout@v2

      # If this job is being run by Bors (it was pushed to staging),
      # then build and run in release mode
      - name: Set RELEASE mode
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        run: |
          echo "RELEASE=true" | tee -a $GITHUB_ENV
          echo "RELEASE_NAME=release" | tee -a $GITHUB_ENV
          echo "RUST_BIN_DIR=target/${{ matrix.rust_target }}/release" | tee -a $GITHUB_ENV

      - name: Install sccache
        run: ./actions/sccache-install.sh ${{ matrix.os }}
      - name: Print env
        run:
          echo "SCCACHE_PATH = ${{ env.SCCACHE_PATH }} "
          echo "RUST_BIN_DIR = ${{ env.RUST_BIN_DIR }} "
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Install zig
        run: ./actions/zig-install.sh ${{ matrix.os }}
      - uses: Swatinem/rust-cache@v1
      - name: Start sccache server
        run: ./actions/sccache-start.sh ${{ matrix.os }}

      - name: Rustfmt
        run: make check-fmt

      - name: Build CLI
        run: make build-cli

      - name: Build Cluster CLI 
        run: make build-cluster

      - name: Build Test CLI 
        run: make build-test

      - name: Stop sccache server
        run: ./actions/sccache-terminate.sh ${{ matrix.os }}


      # Upload artifacts
      - name: Upload artifact - fluvio
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-${{ matrix.rust_target }}
          path: ${{ env.RUST_BIN_DIR }}/fluvio
      - name: Upload artifact - fluvio-run
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-run-${{ matrix.rust_target }}
          path: ${{ env.RUST_BIN_DIR }}/fluvio-run
      - name: Upload atrifact - flv-test
        uses: actions/upload-artifact@v2
        with:
          name: flv-test-${{ matrix.rust_target }}
          path: ${{ env.RUST_BIN_DIR }}/flv-test


  # Run all checks and unit test. This always run on debug mode
  check:
    name: Check (${{ matrix.target }}) (${{ matrix.check }})

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        target: [x86_64-unknown-linux-musl]
        check: [clippy,test]

    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust_target }}
      SCCACHE_CACHE_SIZE: 2G
      SCCACHE_DIR: dummy
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
    steps:
      - uses: actions/checkout@v2

      - name: Install sccache
        run: ./actions/sccache-install.sh ${{ matrix.os }}
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Install Zig
        run: ./actions/zig-install.sh ${{ matrix.os }}
      - uses: Swatinem/rust-cache@v1
      - name: Start sccache server
        run: ./actions/sccache-start.sh ${{ matrix.os }}

      - name: Clippy
        if: ${{ matrix.check == 'clippy' }}
        run: make check-clippy

      - name: Test
        if: ${{ matrix.check == 'test' }} 
        run: |
          make run-all-doc-test
          make run-all-unit-test
      
      - name: Stop sccache server
        run: ./actions/sccache-terminate.sh ${{ matrix.os }}

  build_wasm:
    name: Build WASM crates (${{ matrix.wasm-crate }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        wasm-crate:
          - client
          - socket
          - protocol
          - spu-schema
          - sc-schema
          - dataplane-protocol
          - types
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: wasm32-unknown-unknown

      - name: Build WASM for ${{ matrix.wasm-crate }}
        run: cargo check --manifest-path ./src/${{matrix.wasm-crate}}/Cargo.toml --target wasm32-unknown-unknown

  local_cluster_test:
    name: Local cluster test
    runs-on: ${{ matrix.os }}
    needs: build_platform_binaries
    strategy:
      matrix:
        os: [infinyon-ubuntu-bionic]
        rust: [stable]
    env:
      FLV_SOCKET_WAIT: 600
    steps:
      - uses: actions/checkout@v2
      - run: helm version
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Install zig
        run: ./actions/zig-install.sh ${{ matrix.os }}
      - name: Setup Minikube for Linux
        run: |
          ./k8-util/minikube/reset-minikube.sh 
          sleep 30
      - name: Test minikube
        run: |
          minikube profile list
          minikube status
      - name: Build Test
        run: |
          make RELEASE=release build-test
      - name: Setup installation pre-requisites
        run: |
          cargo run --release --bin fluvio -- cluster start --setup --local --develop
      - name: Print Fluvio version
        run: |
          cargo run --release --bin fluvio -- version
      - name: Run smoke-test
        timeout-minutes: 1
        run: |
          make RELEASE=true UNINSTALL=noclean smoke-test-tls-root
      - name: Build examples
        run: examples/tests/build.sh --release
      - name: Test examples
        timeout-minutes: 1
        run: examples/tests/run.sh --release
      - run: minikube delete
      - name: Upload SC log
        uses: actions/upload-artifact@v2
        timeout-minutes: 5
        if: failure()
        with:
          name: fluvio-sc-logs
          path: /tmp/flv_sc.log

  build_image:
    name: Build Fluvio Docker image
    needs: build_platform_binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
      # Needed for k8-util/docker/build.sh
      - uses: actions/checkout@v2

      # Download artifacts
      - name: Download fluvio-run
        uses: actions/download-artifact@v2
        with:
          name: fluvio-run-x86_64-unknown-linux-musl
          path: .

      - name: Print fluvio-run path
        run: pwd && ls -la . && chmod +x ./fluvio-run && ./fluvio-run -h || true

      # Build and upload docker image
      - name: Build Docker image
        run: k8-util/docker/build.sh ${{ github.sha }} "$(pwd)/fluvio-run"
      - name: Export Docker Image to tarball
        run: docker image save infinyon/fluvio:${{ github.sha }} --output /tmp/infinyon-fluvio.tar
      - name: Upload tarball as artifact
        uses: actions/upload-artifact@v2
        with:
          name: infinyon-fluvio
          path: /tmp/infinyon-fluvio.tar

  k8_cluster_test:
    name: Kubernetes cluster test
    needs: build_image
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [infinyon-ubuntu-bionic]
        rust: [stable]
    env:
      FLV_SOCKET_WAIT: 600
      FLV_CLUSTER_MAX_SC_VERSION_LOOP: 120
      FLV_CLUSTER_MAX_SC_NETWORK_LOOP: 60
      FLV_TEST_CONSUMER_WAIT: 300000
    steps:
      - uses: actions/checkout@v2
      - run: helm version

      - name: Setup Minikube for Linux
        if: startsWith(matrix.os, 'infinyon-ubuntu')
        run: |
          ./k8-util/minikube/reset-minikube.sh
      - name: Test minikube
        run: |
          minikube profile list
          minikube status

      # Download artifacts
      - name: Download artifact - fluvio
        uses: actions/download-artifact@v2
        with:
          name: fluvio-x86_64-unknown-linux-musl
          path: .
      - name: Download artifact - flv-test
        uses: actions/download-artifact@v2
        with:
          name: flv-test-x86_64-unknown-linux-musl
          path: .
      - name: Download Docker Image as Artifact
        uses: actions/download-artifact@v2
        with:
          name: infinyon-fluvio
          path: /tmp
      - name: Load Fluvio Docker Image
        run: |
          ls -la /tmp
          eval $(minikube -p minikube docker-env)
          docker image load --input /tmp/infinyon-fluvio.tar
          docker image ls -a

      - name: Print artifacts and mark executable
        run: ls -la . && chmod +x ./fluvio ./flv-test && ./fluvio -h && ./flv-test -h

      - name: Setup installation pre-requisites
        run: |
          make FLUVIO_BIN=./fluvio RELEASE=true TARGET=x86_64-unknown-linux-musl k8-setup

      - name: Run smoke-test-k8-tls-root
        timeout-minutes: 5
        run: |
          make FLUVIO_BIN=./fluvio TEST_BIN=./flv-test UNINSTALL=noclean smoke-test-k8-tls-root

      - name: Clean minikube
        run: |
          minikube delete
      - name: Save logs
        if: failure()
        run: |
          echo "minikube profile list"
          minikube profile list
          echo "helm list"
          helm list
          echo "get statefulset"
          kubectl get statefulset
          echo "kubectl get pvc"
          kubectl get pvc
          echo "kubectl get pods"
          kubectl get pods
          echo "kubectl get svc"
          kubectl get svc
          echo "kubectl get spu"
          kubectl get spu
          echo "kubectl get spg"
          kubectl get spg
          kubectl logs -l app=fluvio-sc > /tmp/flv_sc.log
      - name: Upload logs
        timeout-minutes: 5
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-k8-logs
          path: /tmp/flv_sc.log

  k8_cluster_upgrade:
    name: Kubernetes cluster upgrade test
# only run if this is run in staging or upgrad test was requested    
#    if: (github.event_name == 'push' && github.ref == 'refs/heads/staging') || env.UPGRADE != null
    needs: build_image
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]

    env:
      FLV_SOCKET_WAIT: 600
      FLV_CLUSTER_MAX_SC_VERSION_LOOP: 120
      FLV_CLUSTER_MAX_SC_NETWORK_LOOP: 60
      FLV_TEST_CONSUMER_WAIT: 300000
      RUSTV: ${{ matrix.rust }}
      TARGET: x86_64-unknown-linux-musl
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
    steps:
      - uses: actions/checkout@v2
      - run: helm version

      - name: Install Minikube for Github runner
        if: matrix.os == 'ubuntu-latest'
        uses: manusa/actions-setup-minikube@v2.3.1
        with:
          minikube version: "v1.18.1"
          kubernetes version: "v1.19.6"
      - name: Setup Minikube for Linux
        if: startsWith(matrix.os, 'infinyon-ubuntu')
        run: |
          minikube delete
          minikube start --driver=docker --kubernetes-version 1.19.6
      - name: Test minikube
        run: |
          minikube profile list
          minikube status
      - name: Setup for upgrade test
        run: |
          gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash

      # Download artifacts
      - name: Download artifact - fluvio
        uses: actions/download-artifact@v2
        with:
          name: fluvio-x86_64-unknown-linux-musl
          path: .
      - name: Download artifact - flv-test
        uses: actions/download-artifact@v2
        with:
          name: flv-test-x86_64-unknown-linux-musl
          path: .
      - name: Download Docker Image as Artifact
        uses: actions/download-artifact@v2
        with:
          name: infinyon-fluvio
          path: /tmp
      - name: Load Fluvio Docker Image
        run: |
          ls -la /tmp
          docker image load --input /tmp/infinyon-fluvio.tar
          docker image ls -a

      - name: Print artifacts and mark executable
        run: ls -la . && chmod +x ./fluvio ./flv-test && ./fluvio -h && ./flv-test -h

      - name: Run upgrade test
        env:
          TEST_DATA_BYTES: 10000
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 45
          max_attempts: 3
          command: |
            export PATH=~/.fluvio/bin:$PATH
            cd tests
            # Use gh cli to collect the last and current release version numbers
            ./upgrade-test.sh $(gh api repos/infinyon/fluvio/releases -q '.[].tag_name' | grep -v dev | sed 's/v//' | head -2 | tac | xargs)

      - name: Clean minikube
        run: |
          minikube delete


  # After all tests have passed, push docker images
  docker_push:
    name: Publish Docker Image
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs:
      - check
      - build_platform_binaries
      - build_wasm
      - local_cluster_test
      - k8_cluster_test
      - k8_cluster_upgrade
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Docker Image as Artifact
        uses: actions/download-artifact@v2
        with:
          name: infinyon-fluvio
          path: /tmp

        # Load image infinyon/fluvio:SHA
      - name: Load Fluvio Docker Image
        run: |
          ls -la /tmp
          docker image load --input /tmp/infinyon-fluvio.tar
          docker image ls -a

        # Tag image as infinyon/fluvio:VERSION-SHA and push
      - name: Publish Fluvio Docker Image
        run: |
          docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
          export TAG="$(cat VERSION)-${{ github.sha }}"
          docker tag "infinyon/fluvio:${{ github.sha }}" "infinyon/fluvio:${TAG}"
          docker push "infinyon/fluvio:${TAG}"

  # When all required jobs pass, bump the `dev` GH prerelease to this commit
  bump_github_release:
    name: Bump dev tag
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs: docker_push
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v2
      - name: Login GH CLI
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
      - name: Delete old release
        run: gh release delete -R infinyon/fluvio dev -y || true
      - name: Bump dev tag
        run: |
          git tag -f dev
          git push -f origin dev
      - name: Create new release
        run: gh release create -R infinyon/fluvio dev -p --notes "Published artifacts from the latest build"

  # Upload the build artifacts to the `dev` GH release, overwriting old artifacts
  github_release:
    name: Publish to GitHub Releases dev (${{ matrix.artifact }}-${{ matrix.target }})
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs: bump_github_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact: [fluvio, fluvio-run]
        target: [x86_64-unknown-linux-musl]
    permissions: write-all
    steps:
      - name: Login GH CLI
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact }}-${{ matrix.target }}
      - name: Publish artifact
        run: |
          ls -la
          mv "${{ matrix.artifact }}" "${{ matrix.artifact }}-${{ matrix.target }}"
          gh release upload -R infinyon/fluvio --clobber dev "${{ matrix.artifact }}-${{ matrix.target }}"

  # Job that follows the success of all required jobs in this workflow.
  # Used by Bors to detect that all required jobs have completed successfully
  done:
    name: Done
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs: github_release
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: echo "Done!"
