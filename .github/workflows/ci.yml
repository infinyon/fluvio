name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  cancel_previous_runs:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
  # check_helm_versions:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - name: Install YQ CLI Tools
  #       run: |
  #         sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CC86BB64
  #         sudo add-apt-repository ppa:rmescandon/yq
  #         sudo apt update
  #         sudo apt install yq -y
  #     - name: Cancel Workflow Action
  #       uses: styfle/cancel-workflow-action@0.4.1
  #       with:
  #         access_token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: check versions
  #       run: make -s check_version

  #  version_check:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #        with:
  #          fetch-depth: 0
  #      - name: Install cargo-cvm
  #        uses: actions-rs/install@v0.1
  #        with:
  #          crate: cargo-cvm
  #          version: latest
  #      - name: Check Versions
  #        run: cargo cvm -x

  check_clippy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v2
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: check clippy
        run: make check-clippy RUSTV=${{ matrix.rust }}

  check_fmt:
    name: check cargo fmt
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v2
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: check fmt
        run: make check-fmt RUSTV=${{ matrix.rust }}

  unit_test_linux:
    name: Unit Test Linux
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 300M
      SCCACHE_DIR: /home/runner/.cache/sccache
      SCCACHE_IDLE_TIMEOUT: 0
    steps:
      - uses: actions/checkout@v2
      - name: Install sccache
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.13
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-${{ matrix.conf }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.conf }}-cargo-registry-
      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: /home/runner/.cache/sccache
          key: ${{ runner.os }}-${{ matrix.conf }}-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.conf }}-sccache-
      - name: Start sccache server
        run: sccache --start-server
      - name: Build Tests
        run: make build-all-test
      - name: Run unit tests
        timeout-minutes: 5
        run: make run-all-unit-test
      - name: Stop sccache server
        run: sccache --stop-server

  unit_test_mac:
    name: Unit Test Mac
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        rust: [stable]
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 300M
      SCCACHE_DIR: /Users/runner/Library/Caches/Mozilla.sccache

    steps:
      - uses: actions/checkout@v2
      - name: Install sccache
        run: brew install sccache
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: test-${{ runner.os }}-${{ matrix.conf }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-${{ runner.os }}-${{ matrix.conf }}-cargo-registry-
      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: /Users/runner/Library/Caches/Mozilla.sccache
          key: test-${{ runner.os }}-${{ matrix.conf }}-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: |
            test-${{ runner.os }}-${{ matrix.conf }}-sccache-
      - name: Start sccache server
        run: sccache --start-server
      - name: Build Tests
        run: make build-all-test
      - name: Run unit tests
        timeout-minutes: 5
        run: make run-all-unit-test
      - name: Stop sccache server
        run: sccache --stop-server



  mac_local_cluster_test:
    name: Local cluster test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        rust: [stable]

    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 300M
      SCCACHE_DIR: /Users/runner/Library/Caches/Mozilla.sccache
      FLUVIO_CMD: true
      FLV_SOCKET_WAIT:  600 

    steps:
      - uses: actions/checkout@v2
      - name: Install sccache
        run: brew install sccache
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-${{ matrix.conf }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.conf }}-cargo-registry-
      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: /Users/runner/Library/Caches/Mozilla.sccache
          key: ${{ runner.os }}-${{ matrix.conf }}-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.conf }}-sccache-
      - name: Start sccache server
        run: sccache --start-server
      - name: Build Test
        run: |
          make RELEASE=release build_test
      - name: Install Helm
        run: actions/ci-replace-helm.sh
        env:
          HELM_VERSION: v3.3.4
          OS: ${{ matrix.os }}
      - run: helm version
      - name: Install Minikube on Mac
        run: brew install minikube
      - name: Setup Minikube for Mac
        run: |
          minikube start --driver=virtualbox
      - name: Test minikube
        run: |
          minikube profile list
          minikube status
      - name: Setup installation pre-requisites
        run: |
          ./target/release/fluvio cluster start --setup --local --develop
      # - name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3
      - name: Print Fluvio version
        run: |
          ./target/release/fluvio version
      - name: smoke test tls
        timeout-minutes: 1
        run: |
          make RELEASE=true UNINSTALL=noclean smoke-test-tls-root
      - name: Build examples
        run: examples/tests/build.sh --release
      - name: Test examples
        timeout-minutes: 1
        run: examples/tests/run.sh --release
      - name: Stop sccache server
        run: sccache --stop-server
      - name: Upload Sc logs
        timeout-minutes: 5
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-local-sc-logs
          path: /usr/local/var/log/fluvio/flv_sc.log
      - name: Upload Spu logs
        timeout-minutes: 5
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-local-spu-logs
          path: /usr/local/var/log/fluvio/spu_log_5001.log


  local_cluster_test:
    name: Local cluster test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [infinyon-ubuntu-bionic]
        rust: [stable]
    env:
      FLUVIO_CMD: true
      FLV_SOCKET_WAIT: 600
    steps:
      - uses: actions/checkout@v2
      - run: helm version
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Setup Minikube for Linux
        run: |
          minikube delete
          minikube start --driver=docker
          sleep 30
      - name: Test minikube
        run: |
          minikube profile list
          minikube status
      - name: Build Test
        run: |
          make RELEASE=release build_test
      - name: Setup installation pre-requisites
        run: |
          ./target/release/fluvio cluster start --setup --local --develop
      - name: Print Fluvio version
        run: |
          ./target/release/fluvio version
      - name: Run smoke-test
        timeout-minutes: 1
        run: |
          make RELEASE=true UNINSTALL=noclean smoke-test-tls-root
      - name: Build examples
        run: examples/tests/build.sh --release
      - name: Test examples
        timeout-minutes: 1
        run: examples/tests/run.sh --release
      - run: minikube delete
      - name: Upload SC log
        uses: actions/upload-artifact@v2
        timeout-minutes: 5
        if: failure()
        with:
          name: fluvio-sc-logs
          path: /tmp/flv_sc.log

  k8_cluster_test:
    name: Kubernetes cluster test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [infinyon-ubuntu-bionic]
        rust: [stable]
    env:
      FLUVIO_CMD:  true 
      FLV_SOCKET_WAIT:  600
      FLV_CLUSTER_MAX_SC_NETWORK_LOOP: 90 
    steps:
      - uses: actions/checkout@v2
      - run: helm version
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Setup Minikube for Linux
        if: startsWith(matrix.os, 'infinyon-ubuntu')
        run: |
          minikube delete
          minikube start --driver=docker
          sleep 30
      - name: Test minikube
        run: |
          minikube profile list
          minikube status
      - name: Build
        run: |
          make RELEASE=release TARGET=x86_64-unknown-linux-musl build_test
      - name: Setup installation pre-requisites
        run: |
          make RELEASE=true TARGET=x86_64-unknown-linux-musl  k8-setup
      - name: Make image
        run: make RELEASE=true minikube_image
      - name: Run smoke-test-k8-tls-root
        timeout-minutes: 1
        run: |
          make RELEASE=true TARGET=x86_64-unknown-linux-musl UNINSTALL=noclean smoke-test-k8-tls-root
      - run: minikube delete
      - name: Save logs
        if: failure()
        run: kubectl logs fluvio-sc > /tmp/flv_sc.log
      - name: Upload logs
        timeout-minutes: 10
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-k8-logs
          path: /tmp/flv_sc.log

  composite_action_test:
    name: Composite Action Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]

    steps:
      - uses: actions/checkout@v2
      - uses: ./
        name: Install Fluvio Local Cluster
      - name: Fluvio command test
        run: |
          fluvio version
          fluvio topic list
          fluvio topic create "foobar"
          sleep 3
          echo foo | fluvio produce "foobar"
          fluvio consume foobar -o 0 -d
          # Delete the topic afterword but this looks to not work right now.
          # fluvio topic delete "foobar"
