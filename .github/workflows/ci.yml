# Build platform and run smoke test
name: CI

permissions:
  contents: read

concurrency:
  group: ${{ github.head_ref || 'ci_staging' }}
  cancel-in-progress: true

on:
  push:
    branches:
      - staging
      - trying
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      verbose:
        description: "Set --verbose to get verbose build output"
        required: false
        default: ""

env:
  CARGO_TERM_COLOR: always
  VERBOSE: ${{ github.events.input.verbose }}


jobs:

  # this job set up dynamic configuration shared among jobs
  config:
    name: Set up Config
    runs-on: ubuntu-latest
    env:
      ENABLE_CHECK: true
      TEST_RUNS: "[r1]"   # default runs
    outputs:
      check: ${{ steps.check.outputs.check }}
      runs: ${{ steps.runs.outputs.runs }}
    steps:
      - id: check
        run: echo "::set-output name=check::${{ env.ENABLE_CHECK }}"
      #- name: Set Staging runs
      ##  if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
      #  run: echo "TEST_RUNS='[r1,r2,r3,r4,r5]'" | tee -a $GITHUB_ENV



  # build binaries for linux x86_64/aarch64 musl which is primary OS for testing clusters
  build_primary_binaries:
    name: Primary build ${{ matrix.binary }} for ${{ matrix.rust-target }} on (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust-target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
        rust: [stable]
        binary: [fluvio, fluvio-run, fluvio-test]
        os: [ubuntu-latest]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
      RUST_BIN_DIR: target/${{ matrix.rust-target }}/debug
      RELEASE_NAME: debug
    steps:
      - uses: actions/checkout@v2

      # If this job is being run by Bors (it was pushed to staging),
      # then build and run in release mode
      - name: Set RELEASE mode
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        shell: bash
        run: |
          echo "RELEASE=true" | tee -a $GITHUB_ENV
          echo "RELEASE_NAME=release" | tee -a $GITHUB_ENV
          echo "RUST_BIN_DIR=target/${{ matrix.rust-target }}/release" | tee -a $GITHUB_ENV

      - name: Print env
        run: |
          echo "RUST_BIN_DIR = ${{ env.RUST_BIN_DIR }} "
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Install zig
        run: ./actions/zig-install.sh ${{ matrix.os }}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.os }}-${{ env.RUST_BIN_DIR }}-${{ matrix.binary }}

      - name: Build fluvio
        if: ${{ matrix.binary == 'fluvio' }}
        run: make build-cli

      - name: Build fluvio-run
        if: ${{ matrix.binary == 'fluvio-run' }}
        run: make build-cluster

      - name: Build fluvio-test
        if: ${{ matrix.binary == 'fluvio-test' }}
        run: make build-test

      # Upload artifacts
      - name: Upload artifact - ${{ matrix.binary }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.binary }}-${{ matrix.rust-target }}
          path: ${{ env.RUST_BIN_DIR }}/${{ matrix.binary }}

  # build other binaries which doesn't need test
  build_binaries:
    name: Build ${{ matrix.binary }} for ${{ matrix.rust-target }} on (${{ matrix.os }})
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust-target:
          - aarch64-apple-darwin
          - arm-unknown-linux-gnueabihf
          - armv7-unknown-linux-gnueabihf
          - x86_64-apple-darwin
        rust: [stable]
        binary: [fluvio]
        include:
          - os: ubuntu-latest
            rust: stable
            rust-target: arm-unknown-linux-gnueabihf
            binary: fluvio
          - os: ubuntu-latest
            rust: stable
            rust-target: armv7-unknown-linux-gnueabihf
            binary: fluvio
          - os: ubuntu-latest
            rust: stable
            rust-target: x86_64-pc-windows-gnu
            binary: fluvio.exe
          - os: macos-latest
            rust: stable
            rust-target: x86_64-apple-darwin
            binary: fluvio
          - os: macos-latest
            rust: stable
            rust-target: x86_64-apple-darwin
            binary: fluvio-run
          - os: macos-11
            rust: stable
            rust-target: aarch64-apple-darwin
            binary: fluvio
          - os: macos-11
            rust: stable
            rust-target: aarch64-apple-darwin
            binary: fluvio-run
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
      RUST_BIN_DIR: target/${{ matrix.rust-target }}/debug
      RELEASE_NAME: debug
    steps:
      - uses: actions/checkout@v2

      # If this job is being run by Bors (it was pushed to staging),
      # then build and run in release mode
      - name: Set RELEASE mode
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        shell: bash
        run: |
          echo "RELEASE=true" | tee -a $GITHUB_ENV
          echo "RELEASE_NAME=release" | tee -a $GITHUB_ENV
          echo "RUST_BIN_DIR=target/${{ matrix.rust-target }}/release" | tee -a $GITHUB_ENV

      - name: Print env
        run: |
          echo "RUST_BIN_DIR = ${{ env.RUST_BIN_DIR }} "
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Install zig
        run: ./actions/zig-install.sh ${{ matrix.os }}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.os }}-${{ matrix.rust-target }}-${{ matrix.binary }}

      - name: Build fluvio
        if: ${{ matrix.binary == 'fluvio' }}
        run: make build-cli

      - name: Install mingw gcc
        if: ${{ matrix.rust-target  == 'x86_64-pc-windows-gnu' }}
        run: sudo apt-get install gcc-mingw-w64-x86-64

      - name: Build fluvio
        if: ${{ matrix.binary == 'fluvio.exe' }}
        run: make build-cli-minimal

      - name: Build fluvio-run
        if: ${{ matrix.binary == 'fluvio-run' }}
        run: make build-cluster

      # Upload artifacts
      - name: Upload artifact - ${{ matrix.binary }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.binary }}-${{ matrix.rust-target }}
          path: ${{ env.RUST_BIN_DIR }}/${{ matrix.binary }}

  # Run all checks and unit test. This always run on debug mode
  check:
    name: Rust check ${{ matrix.check }} (${{ matrix.rust-target }})
    needs: config
    if: ${{ needs.config.outputs.check == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        rust-target: [x86_64-unknown-linux-gnu]
        check: [fmt, clippy, doc, test, integration]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Install Zig
        run: ./actions/zig-install.sh ${{ matrix.os }}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.rust-target }}-${{ matrix.check }}
      - name: Fmt
        if: ${{ matrix.check == 'fmt' }}
        run: make check-fmt
      - name: Clippy
        if: ${{ matrix.check == 'clippy' }}
        run: make check-clippy
      - name: Doc Test
        if: ${{ matrix.check == 'doc' }}
        run: make run-all-doc-test
      - name: Unit Test
        if: ${{ matrix.check == 'test' }}
        run: make run-all-unit-test
      - name: Integration test
        if: ${{ matrix.check == 'integration' }}
        run: make run-integration-test

  check_wasm:
    name: Build WASM crates (${{ matrix.wasm-crate }})
    needs: config
    if: ${{ needs.config.outputs.check == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        wasm-crate:
          - fluvio
          - fluvio-socket
          - fluvio-protocol
          - fluvio-spu-schema
          - fluvio-sc-schema
          - fluvio-dataplane-protocol
          - fluvio-types
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: wasm32-unknown-unknown

      - name: Build WASM for ${{ matrix.wasm-crate }}
        run: cargo check --manifest-path ./crates/${{matrix.wasm-crate}}/Cargo.toml --target wasm32-unknown-unknown

  check_windows:
    name: Check Windows for crates (${{ matrix.crate }})
    needs: config
    if: ${{ needs.config.outputs.check == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        rust: [stable]
        crate:
          - fluvio
          - fluvio-cli
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.os }}-${{ matrix.crate }}

      - name: Build ${{ matrix.crate }} for ${{ matrix.os }}
        run: cargo build --manifest-path ./crates/${{ matrix.crate }}/Cargo.toml

      - name: Test ${{ matrix.crate }} for ${{ matrix.os }}
        run: cargo test --manifest-path ./crates/${{ matrix.crate }}/Cargo.toml

  local_cluster_test:
    name: Local cluster test run (${{ matrix.run }})
    runs-on: ${{ matrix.os }}
    needs:
      - build_primary_binaries
      - config
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        run: [r1]
     #   run: ${{ fromJson(needs.config.outputs.runs )}}

    steps:
      - uses: actions/checkout@v2
      - uses: nolar/setup-k3d-k3s@v1
      - name: Download artifact - fluvio
        uses: actions/download-artifact@v2
        with:
          name: fluvio-x86_64-unknown-linux-musl
          path: .
      - name: Download artifact - fluvio-run
        uses: actions/download-artifact@v2
        with:
          name: fluvio-run-x86_64-unknown-linux-musl
          path: ~/.fluvio/extensions
      - run: chmod +x ~/.fluvio/extensions/fluvio-run
      - name: Download artifact - fluvio-test
        uses: actions/download-artifact@v2
        with:
          name: fluvio-test-x86_64-unknown-linux-musl
          path: .
      - name: Print artifacts and mark executable
        run: chmod +x ./fluvio ./fluvio-test && ./fluvio version
      - name: Set up cluster
        run: ./k8-util/cluster/reset-k3d.sh
      - name: Run smoke-test
        timeout-minutes: 2
        run: |
          date
          make  FLUVIO_BIN=./fluvio TEST_BIN=./fluvio-test UNINSTALL=noclean EXTRA_ARG=--keep-cluster smoke-test-tls-root
          date
          kubectl get partitions
          kubectl get partitions  -o=jsonpath='{.items[0].status.leader.leo}' | grep 100
          echo "done"
      #    make  RUST_LOG=fluvio_test=debug,fluvio_test=debug,fluvio_socket=trace,fluvio::consumer=debug,fluvio::producer=debug DEFAULT_ITERATION=10 DEFAULT_SPU=1 REPL=1 FLUVIO_BIN=./fluvio TEST_BIN=./fluvio-test UNINSTALL=noclean smoke-test-local


      - name: Save logs
        if: failure()
        run: |
          date
          uname -a
          kubectl get spu
          kubectl get statefulset
          kubectl get topics
          kubectl get partitions
          ps -ef | grep fluvio

      - name: Upload Logs
        uses: actions/upload-artifact@v2
        timeout-minutes: 5
        if: failure()
        with:
          name: local-${{ matrix.run }}-logs
          path: /tmp/*.log

  build_image:
    name: Build Fluvio Docker image
    needs: build_primary_binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust-target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
        rust: [stable]
    steps:
      # Needed for k8-util/docker/build.sh
      - uses: actions/checkout@v2

      # Download artifacts
      - name: Download fluvio-run
        uses: actions/download-artifact@v2
        with:
          name: fluvio-run-${{ matrix.rust-target }}
          path: .

      - name: Print fluvio-run path
        run: pwd && ls -la . && chmod +x ./fluvio-run && ./fluvio-run -h || true

      # Build and upload docker image
      - name: Build Docker image
        run: k8-util/docker/build.sh ${{ matrix.rust-target }} ${{ github.sha }} "$(pwd)/fluvio-run"
      - name: Export Docker Image to tarball
        run: docker image save infinyon/fluvio:${{ github.sha }}-${{ matrix.rust-target }} --output /tmp/infinyon-fluvio-${{ matrix.rust-target }}.tar
      - name: Upload tarball as artifact
        uses: actions/upload-artifact@v2
        with:
          name: infinyon-fluvio-${{ matrix.rust-target }}.tar
          path: /tmp/infinyon-fluvio-${{ matrix.rust-target }}.tar

  k8_cluster_test:
    name: Kubernetes cluster test run (${{ matrix.run }}) k8 (${{ matrix.k8 }})
    needs: build_image
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        run: [r1]
        k8: [k3d,minikube]
    steps:
      - uses: actions/checkout@v2
      # Download artifacts
      - name: Download artifact - fluvio
        uses: actions/download-artifact@v2
        with:
          name: fluvio-x86_64-unknown-linux-musl
          path: .
      - name: Download artifact - fluvio-test
        uses: actions/download-artifact@v2
        with:
          name: fluvio-test-x86_64-unknown-linux-musl
          path: .
      - name: Download Docker Image as Artifact
        uses: actions/download-artifact@v2
        with:
          name: infinyon-fluvio-x86_64-unknown-linux-musl.tar
          path: /tmp

      - name: Print artifacts and mark executable
        run: chmod +x ./fluvio ./fluvio-test && ./fluvio version && ./fluvio-test -h

      # Retag image to remove arch from tag
      - name: Load Fluvio Docker Image for K3d
        run: |
          ls -la /tmp
          docker image load --input /tmp/infinyon-fluvio-x86_64-unknown-linux-musl.tar
          docker image tag infinyon/fluvio:${{ github.sha }}-x86_64-unknown-linux-musl infinyon/fluvio:${{ github.sha }}
          docker image ls -a
      #- name: Load Docker image for Minikube
      #    eval $(minikube -p minikube docker-env)
      #    docker image load --input /tmp/infinyon-fluvio.tar
      #    docker image ls -a

      - name: Export Docker Image to tarball
        run: docker image save infinyon/fluvio:${{ github.sha }} --output /tmp/infinyon-fluvio.tar
      - name: Install K3d
        if: ${{ matrix.k8 == 'k3d' }}
        run: |
          curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
          ./k8-util/cluster/reset-k3d.sh
      - name: Load image to K3d
        if: ${{ matrix.k8 == 'k3d' }}
        run: |
          k3d image import -k /tmp/infinyon-fluvio.tar -c fluvio
      - name: Install Minikube and import image
        if: ${{ matrix.k8 == 'minikube' }}
        uses: manusa/actions-setup-minikube@v2.4.2
        with:
          minikube version: "v1.22.0"
          kubernetes version: "v1.21.2"
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker
      - name: Load image to minikube
        if: ${{ matrix.k8 == 'minikube' }}
        run: |
          eval $(minikube -p minikube docker-env)
          docker image load --input /tmp/infinyon-fluvio.tar
      - name: Run smoke-test-k8-tls-root
        timeout-minutes: 10
        env:
          FLV_DISPATCHER_WAIT: 300   # k3d in Github make take while to provision PVC
        run: |
            date
            make FLUVIO_BIN=./fluvio TEST_BIN=./fluvio-test EXTRA_ARG=--keep-cluster UNINSTALL=noclean smoke-test-k8-tls-root
        # make FLUVIO_BIN=./fluvio TEST_BIN=./flv-test smoke-test-k8-tls-root
      - name: Print version
        run: |
          ./fluvio version
          date
          uname -a
          helm list
          kubectl get crd
          kubectl get spu
          kubectl get statefulset
          kubectl get pvc
          kubectl get pods
          kubectl get svc
          kubectl get spg

      - name: Save logs
        if: failure()
        run: |
          date
          uname -a
          helm list
          kubectl get crd
          kubectl get spu
          kubectl get partitions
          kubectl get statefulset
          kubectl get pvc
          kubectl get pods
          kubectl get svc
          kubectl get spg
          kubectl logs fluvio-spg-main-0  > /tmp/k8_${{ matrix.run }}_spu0.log || true
          kubectl logs fluvio-spg-main-1  > /tmp/k8_${{ matrix.run }}_spu1.log || true
          ./dev-tools/sc-pod-log.sh > /tmp/k8_${{ matrix.run }}_sc.log || true
      - name: Upload logs
        timeout-minutes: 5
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: k8_${{ matrix.run }}_log
          path: /tmp/k8_*.log

  k8_upgrade_test:
    name: Upgrade cluster test on (${{ matrix.run }})
    needs: build_image
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        run: [r1]
    steps:
      - uses: actions/checkout@v2
      - name: Setup K3d
        run: |
          curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
          ./k8-util/cluster/reset-k3d.sh
      # Download artifacts
      - name: Download artifact - fluvio
        uses: actions/download-artifact@v2
        with:
          name: fluvio-x86_64-unknown-linux-musl
          path: .
      - name: Download Docker Image as Artifact
        uses: actions/download-artifact@v2
        with:
          name: infinyon-fluvio-x86_64-unknown-linux-musl.tar
          path: /tmp
      - name: Print artifacts and mark executable
        run: ls -la . && chmod +x ./fluvio && ./fluvio version


      # Retag image to remove arch from tag
      - name: Load Fluvio Docker Image
        run: |
          ls -la /tmp
          docker image load --input /tmp/infinyon-fluvio-x86_64-unknown-linux-musl.tar
          docker image tag infinyon/fluvio:${{ github.sha }}-x86_64-unknown-linux-musl infinyon/fluvio:${{ github.sha }}
          docker image ls -a

      - name: Export Docker Image to tarball
        run: docker image save infinyon/fluvio:${{ github.sha }} --output /tmp/infinyon-fluvio.tar

      - name: Run upgrade test with CI artifacts
        timeout-minutes: 3
        env:
          TEST_DATA_BYTES: 10000
          FLV_DISPATCHER_WAIT: 300
        run: |
          date
          k3d image import -k /tmp/infinyon-fluvio.tar -c fluvio
          export PATH=~/.fluvio/bin:$PATH
          make FLUVIO_BIN=./fluvio upgrade-test

      - name: Save logs
        if: failure()
        run: |
          helm list
          kubectl get statefulset
          kubectl get pvc
          kubectl get pods
          kubectl get svc
          kubectl get spu
          kubectl get spg
          kubectl logs fluvio-spg-main-0  > /tmp/k8_${{ matrix.run }}_spu0.log || true
          kubectl logs fluvio-spg-main-1  > /tmp/k8_${{ matrix.run }}_spu1.log || true
          ./dev-tools/sc-pod-log.sh > /tmp/k8_${{ matrix.run }}_sc.log || true
      - name: Upload logs
        timeout-minutes: 5
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: k8_${{ matrix.run }}_log
          path: /tmp/k8_*.log

  # Ensure all checks, tests are perform and all binaries are built
  # After this, we are committed for release
  docker_push:
    name: Publish Docker Image
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs:
      - check
      - check_wasm
      - check_windows
      - build_image
      - local_cluster_test
      - k8_cluster_test
      - k8_upgrade_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download x86_64-unknown-linux-musl Docker Image as Artifact
        uses: actions/download-artifact@v2
        with:
          name: infinyon-fluvio-x86_64-unknown-linux-musl.tar
          path: /tmp
      - name: Download aarch64-unknown-linux-musl Docker Image as Artifact
        uses: actions/download-artifact@v2
        with:
          name: infinyon-fluvio-aarch64-unknown-linux-musl.tar
          path: /tmp

        # Load image infinyon/fluvio:SHA-ARCH
      - name: Load Fluvio Docker Image
        run: |
          ls -la /tmp
          docker image load --input /tmp/infinyon-fluvio-x86_64-unknown-linux-musl.tar
          docker image load --input /tmp/infinyon-fluvio-aarch64-unknown-linux-musl.tar
          docker image ls -a

      - name: Publish Fluvio Docker images
        run: |
          export TAG="$(cat VERSION)-${{ github.sha }}"
          docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
          docker tag "infinyon/fluvio:${{ github.sha }}-x86_64-unknown-linux-musl" "docker.io/infinyon/fluvio:${TAG}-amd64"
          docker tag "infinyon/fluvio:${{ github.sha }}-aarch64-unknown-linux-musl" "docker.io/infinyon/fluvio:${TAG}-arm64v8"
          docker push "docker.io/infinyon/fluvio:${TAG}-amd64"
          docker push "docker.io/infinyon/fluvio:${TAG}-arm64v8"
          docker manifest create "docker.io/infinyon/fluvio:${TAG}" \
            "docker.io/infinyon/fluvio:${TAG}-amd64" \
            "docker.io/infinyon/fluvio:${TAG}-arm64v8"
          docker manifest push "docker.io/infinyon/fluvio:${TAG}"

  # When all required jobs pass, bump the `dev` GH prerelease to this commit
  bump_github_release:
    name: Bump dev tag
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs:
      - docker_push
      - build_binaries
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v2
      - name: Login GH CLI
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
      - name: Delete old release
        run: gh release delete -R infinyon/fluvio dev -y || true
      - name: Bump dev tag
        run: |
          git tag -f dev
          git push -f origin dev
      - name: Create new release
        run: gh release create -R infinyon/fluvio dev -p --notes "Published artifacts from the latest build"

  # Upload the build artifacts to the `dev` GH release, overwriting old artifacts
  publish_github_helm_pkg:
    name: Publish helm chart to GitHub Releases dev
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs: bump_github_release
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v2
      - name: Login GH CLI
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
      - name: package helm
        run: make helm_pkg
      - name: Publish artifact
        run: |
          gh release upload -R infinyon/fluvio --clobber dev k8-util/helm/pkg_app/*.*
          gh release upload -R infinyon/fluvio --clobber dev k8-util/helm/pkg_sys/*.*

  publish_github_binaries:
    name: Publish to GitHub Releases dev (${{ matrix.artifact }}-${{ matrix.rust-target }})
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs:
      - bump_github_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-target:
          - aarch64-unknown-linux-musl
          - aarch64-apple-darwin
          - armv7-unknown-linux-gnueabihf
          - arm-unknown-linux-gnueabihf
          - x86_64-apple-darwin
          - x86_64-unknown-linux-musl
        artifact: [fluvio]
        include:
          - rust-target: x86_64-unknown-linux-musl
            artifact: fluvio-run
          - rust-target: x86_64-apple-darwin
            artifact: fluvio-run
          - rust-target: aarch64-apple-darwin
            artifact: fluvio-run
          - rust-target: x86_64-pc-windows-gnu
            artifact: fluvio.exe
    permissions: write-all
    steps:
      - name: Login GH CLI
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact }}-${{ matrix.rust-target }}
      - name: Publish artifact
        run: |
          ls -la
          echo "${{ matrix.rust-target }}" > .target
          zip "${{ matrix.artifact }}-${{ matrix.rust-target }}.zip" "${{ matrix.artifact }}" .target
          gh release upload -R infinyon/fluvio --clobber dev "${{ matrix.artifact }}-${{ matrix.rust-target }}.zip"

  # Job that follows the success of all required jobs in this workflow.
  # Used by Bors to detect that all required jobs have completed successfully
  done:
    name: Done
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs: [publish_github_binaries, publish_github_helm_pkg]
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: echo "Done!"