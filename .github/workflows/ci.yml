name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  # check_helm_versions:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - name: Install YQ CLI Tools
  #       run: |
  #         sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CC86BB64
  #         sudo add-apt-repository ppa:rmescandon/yq
  #         sudo apt update
  #         sudo apt install yq -y
  #     - name: Cancel Workflow Action
  #       uses: styfle/cancel-workflow-action@0.4.1
  #       with:
  #         access_token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: check versions
  #       run: make -s check_version

#  version_check:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#      - name: Install cargo-cvm
#        uses: actions-rs/install@v0.1
#        with:
#          crate: cargo-cvm
#          version: latest
#      - name: Check Versions
#        run: cargo cvm -x

  check_clippy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v2
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: check clippy
        run: make check-clippy RUSTV=${{ matrix.rust }}
  check_fmt:
    name: check cargo fmt
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v2
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: check fmt
        run: make check-fmt RUSTV=${{ matrix.rust }}

  unit_test:
    name: Unit test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        rust: [stable]

    steps:
      - uses: actions/checkout@v2
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Show rustup
        run: rustup show
      - name: Run unit tests
        run:  make run-all-unit-test

  

  local_cluster_test:
    name: Local cluster test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macOS-latest]
        rust: [stable]

    steps:
      - uses: actions/checkout@v2
      - name: Install Helm
        run: dev-tools/ci-replace-helm.sh
        env:
          HELM_VERSION: v3.3.4
          OS: ${{ matrix.os }}
      - run: helm version
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Install Minikube on Linux
        if: startsWith(matrix.os,'ubuntu')
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
      - name: Install Minikube on Mac
        if: startsWith(matrix.os, 'macOS')
        run:  brew install minikube
      - name: Setup Minikube for Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |  
          minikube start --driver=docker
      - name: Setup Minikube for Mac
        if: startsWith(matrix.os, 'macOS')
        run: |  
          minikube start --driver=virtualbox
      - name: Test minikube
        run: |
          minikube profile list
      - name: Build
        run: |
          cargo build
      - name: install fluvio system chart
        run: |
          FLV_CMD=true ./target/debug/fluvio cluster install --sys --develop
      - name: smoke test tls for linux
        if: startsWith(matrix.os,'ubuntu')
        run: |
          FLV_CMD=true make smoke-test-tls-root
          make test-permission-user1-local
      - name: smoke test tls
        if: startsWith(matrix.os, 'macOS')
        run: |
          FLV_CMD=true make smoke-test-tls-root DEFAULT_SPU=1
          make test-permission-user1-local
      - name: Upload logs on Linux
        if: startsWith(matrix.os,'ubuntu') && failure()
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-logs
          path: /tmp/flv_sc.log
      - name: Upload logs on Mac
        if: startsWith(matrix.os,'macOS') && failure()
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-logs
          path: /usr/local/var/log/fluvio/flv_sc.log



  k8_cluster_test:
    name: Kubernetes cluster test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    
    steps:
      - uses: actions/checkout@v2
      - name: Install Helm
        run: dev-tools/ci-replace-helm.sh
        env:
          HELM_VERSION: v3.3.4
          OS: ${{ matrix.os }}
      - run: helm version
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Install Minikube on Linux
        if: startsWith(matrix.os,'ubuntu')
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
      - name: Setup Minikube for Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |  
          minikube start --driver=docker
      - name: Test minikube
        run: |
          minikube profile list
          minikube status
      - name: Build
        run: |
          cargo build
      - name: install fluvio system chart
        run: |
          FLV_CMD=true ./target/debug/fluvio cluster install --sys --develop
      - name: Install musl-tools for Linux
        run: |
          sudo apt install -y musl-tools
          sudo ln -s /usr/bin/musl-gcc /usr/local/bin/x86_64-linux-musl-gcc
      - name: smoke test k8 tls
        run: | 
          FLV_CMD=true make smoke-test-k8-tls-root
      - name: Save logs
        if: failure()
        run: kubectl logs flv-sc > /tmp/flv_sc.log
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-k8-logs
          path: /tmp/flv_sc.log
