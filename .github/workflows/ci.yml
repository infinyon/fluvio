# Build platform and run smoke test
name: CI

permissions:
  contents: read

concurrency:
  group: ${{ github.head_ref || 'ci_staging' }}
  cancel-in-progress: true

on:
  push:
    branches:
      - staging
      - trying
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      verbose:
        description: "Set --verbose to get verbose build output"
        required: false
        default: ""

env:
  CARGO_TERM_COLOR: always
  VERBOSE: ${{ github.events.input.verbose }}


jobs:


  # build binaries for linux musl which is primary OS for testing clusters
  build_primary_binaries:
    name: Build ${{ matrix.binary }} for ${{ matrix.rust-target }} on (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust-target:
          - x86_64-unknown-linux-musl
        rust: [stable]
        binary: [fluvio]
        include:
          - os: ubuntu-latest
            rust: stable
            rust-target: x86_64-unknown-linux-musl
            binary: fluvio
          - os: ubuntu-latest
            rust: stable
            rust-target: x86_64-unknown-linux-musl
            binary: fluvio-run
          - os: ubuntu-latest
            rust: stable
            rust-target: x86_64-unknown-linux-musl
            binary: flv-test
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
      RUST_BIN_DIR: target/${{ matrix.rust-target }}/debug
      RELEASE_NAME: debug
    steps:
      - uses: actions/checkout@v2

      # If this job is being run by Bors (it was pushed to staging),
      # then build and run in release mode
      - name: Set RELEASE mode
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        shell: bash
        run: |
          echo "RELEASE=true" | tee -a $GITHUB_ENV
          echo "RELEASE_NAME=release" | tee -a $GITHUB_ENV
          echo "RUST_BIN_DIR=target/${{ matrix.rust-target }}/release" | tee -a $GITHUB_ENV

      - name: Print env
        run: |
          echo "RUST_BIN_DIR = ${{ env.RUST_BIN_DIR }} "
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Install zig
        run: ./actions/zig-install.sh ${{ matrix.os }}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.os }}-${{ matrix.rust-target }}-${{ matrix.binary }}

      - name: Build fluvio
        if: ${{ matrix.binary == 'fluvio' }}
        run: make build-cli

      - name: Build fluvio-run
        if: ${{ matrix.binary == 'fluvio-run' }}
        run: make build-cluster

      - name: Build flv-test
        if: ${{ matrix.binary == 'flv-test' }}
        run: make build-test

      # Upload artifacts
      - name: Upload artifact - ${{ matrix.binary }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.binary }}-${{ matrix.rust-target }}
          path: ${{ env.RUST_BIN_DIR }}/${{ matrix.binary }}


  # build other binaries which doesn't need test
  build_binaries:
    name: Build ${{ matrix.binary }} for ${{ matrix.rust-target }} on (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust-target:
          - aarch64-unknown-linux-musl
          - aarch64-apple-darwin
          - armv7-unknown-linux-gnueabihf
          - x86_64-apple-darwin
        rust: [stable]
        binary: [fluvio]
        include:
          - os: ubuntu-latest
            rust: stable
            rust-target: aarch64-unknown-linux-musl
            binary: fluvio
          - os: ubuntu-latest
            rust: stable
            rust-target: arm-unknown-linux-gnueabihf
            binary: fluvio
          - os: ubuntu-latest
            rust: stable
            rust-target: armv7-unknown-linux-gnueabihf
            binary: fluvio
          - os: windows-latest
            rust: stable
            rust-target: x86_64-pc-windows-msvc
            binary: fluvio.exe
          - os: macos-latest
            rust: stable
            rust-target: x86_64-apple-darwin
            binary: fluvio
          - os: macos-latest
            rust: stable
            rust-target: x86_64-apple-darwin
            binary: fluvio
          - os: macos-11
            rust: stable
            rust-target: aarch64-apple-darwin
            binary: fluvio
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
      RUST_BIN_DIR: target/${{ matrix.rust-target }}/debug
      RELEASE_NAME: debug
    steps:
      - uses: actions/checkout@v2

      # If this job is being run by Bors (it was pushed to staging),
      # then build and run in release mode
      - name: Set RELEASE mode
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        shell: bash
        run: |
          echo "RELEASE=true" | tee -a $GITHUB_ENV
          echo "RELEASE_NAME=release" | tee -a $GITHUB_ENV
          echo "RUST_BIN_DIR=target/${{ matrix.rust-target }}/release" | tee -a $GITHUB_ENV

      - name: Print env
        run: |
          echo "RUST_BIN_DIR = ${{ env.RUST_BIN_DIR }} "
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Install zig
        run: ./actions/zig-install.sh ${{ matrix.os }}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.os }}-${{ matrix.rust-target }}-${{ matrix.binary }}

      - name: Build fluvio
        if: ${{ matrix.binary == 'fluvio' }}
        run: make build-cli

      - name: Build fluvio
        if: ${{ matrix.binary == 'fluvio.exe' }}
        run: make build-cli-minimal

      # Upload artifacts
      - name: Upload artifact - ${{ matrix.binary }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.binary }}-${{ matrix.rust-target }}
          path: ${{ env.RUST_BIN_DIR }}/${{ matrix.binary }}

  # Run all checks and unit test. This always run on debug mode
  check:
    name: ${{ matrix.check }} (${{ matrix.rust-target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        rust-target: [x86_64-unknown-linux-gnu]
        check: [clippy, doc, test, integration]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Install Zig
        run: ./actions/zig-install.sh ${{ matrix.os }}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.rust-target }}-${{ matrix.check }}

      - name: Clippy
        if: ${{ matrix.check == 'clippy' }}
        run: make check-clippy
      - name: Doc Test
        if: ${{ matrix.check == 'doc' }}
        run: make run-all-doc-test
      - name: Unit Test
        if: ${{ matrix.check == 'test' }}
        run: make run-all-unit-test
      - name: Integration test
        if: ${{ matrix.check == 'integration' }}
        run: make run-integration-test


  check_wasm:
    name: Build WASM crates (${{ matrix.wasm-crate }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        wasm-crate:
          - client
          - socket
          - protocol
          - spu-schema
          - sc-schema
          - dataplane-protocol
          - types
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: wasm32-unknown-unknown

      - name: Build WASM for ${{ matrix.wasm-crate }}
        run: cargo check --manifest-path ./src/${{matrix.wasm-crate}}/Cargo.toml --target wasm32-unknown-unknown

  check_windows:
    name: Check Windows for crates (${{ matrix.crate }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        rust: [stable]
        crate:
          - client
          - cli
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.os }}-${{ matrix.crate }}

      - name: set up helm
        run:  make helm_pkg
      - name: Build ${{ matrix.crate }} for ${{ matrix.os }}
        run: cargo build --manifest-path ./src/${{matrix.crate}}/Cargo.toml

      - name: Test ${{ matrix.crate }} for ${{ matrix.os }}
        run: cargo test --manifest-path ./src/${{matrix.crate}}/Cargo.toml

  local_cluster_test:
    name: Local cluster test
    runs-on: ${{ matrix.os }}
    needs: build_primary_binaries
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    env:
      FLV_SOCKET_WAIT: 600
    steps:
      - uses: actions/checkout@v2
      - name: Install Minikube for Github runner
        uses: manusa/actions-setup-minikube@v2.4.2
        with:
          minikube version: "v1.22.0"
          kubernetes version: "v1.21.2"
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker
      - name: Test minikube
        run: |
          helm version
          minikube profile list
          minikube status
      - name: Download artifact - fluvio
        uses: actions/download-artifact@v2
        with:
          name: fluvio-x86_64-unknown-linux-musl
          path: .
      - name: Download artifact - fluvio-run
        uses: actions/download-artifact@v2
        with:
          name: fluvio-run-x86_64-unknown-linux-musl
          path: ~/.fluvio/extensions
      - run: chmod +x ~/.fluvio/extensions/fluvio-run
      - name: Download artifact - flv-test
        uses: actions/download-artifact@v2
        with:
          name: flv-test-x86_64-unknown-linux-musl
          path: .
      - name: Print artifacts and mark executable
        run: ls -la . && chmod +x ./fluvio ./flv-test && ./fluvio version && ./flv-test -h
      - name: Setup
        run: ./fluvio cluster start --setup --local
      - name: Run smoke-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: make FLUVIO_BIN=./fluvio TEST_BIN=./flv-test UNINSTALL=noclean smoke-test-tls-root

      - name: Upload SC log
        uses: actions/upload-artifact@v2
        timeout-minutes: 5
        if: failure()
        with:
          name: fluvio-sc-logs
          path: /tmp/flv_sc.log

  build_image:
    name: Build Fluvio Docker image
    needs: build_primary_binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
      # Needed for k8-util/docker/build.sh
      - uses: actions/checkout@v2

      # Download artifacts
      - name: Download fluvio-run
        uses: actions/download-artifact@v2
        with:
          name: fluvio-run-x86_64-unknown-linux-musl
          path: .

      - name: Print fluvio-run path
        run: pwd && ls -la . && chmod +x ./fluvio-run && ./fluvio-run -h || true

      # Build and upload docker image
      - name: Build Docker image
        run: k8-util/docker/build.sh ${{ github.sha }} "$(pwd)/fluvio-run"
      - name: Export Docker Image to tarball
        run: docker image save infinyon/fluvio:${{ github.sha }} --output /tmp/infinyon-fluvio.tar
      - name: Upload tarball as artifact
        uses: actions/upload-artifact@v2
        with:
          name: infinyon-fluvio
          path: /tmp/infinyon-fluvio.tar

  k8_cluster_test:
    name: Kubernetes cluster test
    needs: build_image
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    env:
      FLV_SOCKET_WAIT: 600
    steps:
      - uses: actions/checkout@v2
      - name: Install Minikube for Github runner
        uses: manusa/actions-setup-minikube@v2.4.2
        with:
          minikube version: "v1.22.0"
          kubernetes version: "v1.21.2"
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker
      - name: Test minikube
        run: |
          helm version
          minikube profile list
          minikube status
      # Download artifacts
      - name: Download artifact - fluvio
        uses: actions/download-artifact@v2
        with:
          name: fluvio-x86_64-unknown-linux-musl
          path: .
      - name: Download artifact - flv-test
        uses: actions/download-artifact@v2
        with:
          name: flv-test-x86_64-unknown-linux-musl
          path: .
      - name: Download Docker Image as Artifact
        uses: actions/download-artifact@v2
        with:
          name: infinyon-fluvio
          path: /tmp
      - name: Load Fluvio Docker Image
        run: |
          ls -la /tmp
          eval $(minikube -p minikube docker-env)
          docker image load --input /tmp/infinyon-fluvio.tar
          docker image ls -a

      - name: Print artifacts and mark executable
        run: ls -la . && chmod +x ./fluvio ./flv-test && ./fluvio version && ./flv-test -h

      - name: Setup installation pre-requisites
        run: |
          make FLUVIO_BIN=./fluvio RELEASE=true TARGET=x86_64-unknown-linux-musl k8-setup

      - name: Run smoke-test-k8-tls-root
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: make FLUVIO_BIN=./fluvio TEST_BIN=./flv-test smoke-test-k8-tls-root

      - name: Save logs
        if: failure()
        run: |
          echo "minikube profile list"
          minikube profile list
          echo "helm list"
          helm list
          echo "get statefulset"
          kubectl get statefulset
          echo "kubectl get pvc"
          kubectl get pvc
          echo "kubectl get pods"
          kubectl get pods
          echo "kubectl get svc"
          kubectl get svc
          echo "kubectl get spu"
          kubectl get spu
          echo "kubectl get spg"
          kubectl get spg
          kubectl logs -l app=fluvio-sc > /tmp/flv_sc.log
      - name: Upload logs
        timeout-minutes: 5
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-k8-logs
          path: /tmp/flv_sc.log

  k8_upgrade_test:
    name: Upgrade cluster test
    if: false # Disable job for CI
    needs: build_image
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    env:
      FLV_SOCKET_WAIT: 600
    steps:
      - uses: actions/checkout@v2
      - name: Install Minikube for Github runner
        uses: manusa/actions-setup-minikube@v2.4.2
        with:
          minikube version: "v1.22.0"
          kubernetes version: "v1.21.2"
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker
      - name: Test minikube
        run: |
          helm version
          minikube profile list
          minikube status
      # Download artifacts
      - name: Download artifact - fluvio
        uses: actions/download-artifact@v2
        with:
          name: fluvio-x86_64-unknown-linux-musl
          path: .
      - name: Download Docker Image as Artifact
        uses: actions/download-artifact@v2
        with:
          name: infinyon-fluvio
          path: /tmp
      - name: Load Fluvio Docker Image
        run: |
          ls -la /tmp
          eval $(minikube -p minikube docker-env)
          docker image load --input /tmp/infinyon-fluvio.tar
          docker image ls -a

      - name: Print artifacts and mark executable
        run: ls -la . && chmod +x ./fluvio && ./fluvio version

      - name: Setup for upgrade test
        run: |
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash

      - name: Run upgrade test with CI artifacts
        env:
          TEST_DATA_BYTES: 10000
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            export PATH=~/.fluvio/bin:$PATH
            make FLUVIO_BIN=./fluvio upgrade-test

      - name: Save logs
        if: failure()
        run: |
          echo "minikube profile list"
          minikube profile list
          echo "helm list"
          helm list
          echo "get statefulset"
          kubectl get statefulset
          echo "kubectl get pvc"
          kubectl get pvc
          echo "kubectl get pods"
          kubectl get pods
          echo "kubectl get svc"
          kubectl get svc
          echo "kubectl get spu"
          kubectl get spu
          echo "kubectl get spg"
          kubectl get spg
          kubectl logs -l app=fluvio-sc > /tmp/flv_sc.log
      - name: Upload logs
        timeout-minutes: 5
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-k8-logs
          path: /tmp/flv_sc.log

  # Ensure all checks, tests are perform and all binaries are built
  # After this, we are committed for release
  docker_push:
    name: Publish Docker Image
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs:
      - check
      - check_wasm
      - check_windows
      - build_primary_binaries 
      - build_binaries
      - local_cluster_test
      - k8_cluster_test
      #- k8_upgrade_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Docker Image as Artifact
        uses: actions/download-artifact@v2
        with:
          name: infinyon-fluvio
          path: /tmp

        # Load image infinyon/fluvio:SHA
      - name: Load Fluvio Docker Image
        run: |
          ls -la /tmp
          docker image load --input /tmp/infinyon-fluvio.tar
          docker image ls -a

        # Tag image as infinyon/fluvio:VERSION-SHA and push
      - name: Publish Fluvio Docker Image
        run: |
          docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
          export TAG="$(cat VERSION)-${{ github.sha }}"
          docker tag "infinyon/fluvio:${{ github.sha }}" "infinyon/fluvio:${TAG}"
          docker push "infinyon/fluvio:${TAG}"

  # When all required jobs pass, bump the `dev` GH prerelease to this commit
  bump_github_release:
    name: Bump dev tag
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs: 
      - docker_push
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v2
      - name: Login GH CLI
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
      - name: Delete old release
        run: gh release delete -R infinyon/fluvio dev -y || true
      - name: Bump dev tag
        run: |
          git tag -f dev
          git push -f origin dev
      - name: Create new release
        run: gh release create -R infinyon/fluvio dev -p --notes "Published artifacts from the latest build"

  # Upload the build artifacts to the `dev` GH release, overwriting old artifacts
  publish_github_helm_pkg:
    name: Publish helm chart to GitHub Releases dev
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs: bump_github_release
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v2
      - name: Login GH CLI
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
      - name: package helm
        run:  make helm_pkg
      - name: Publish artifact
        run: |
          gh release upload -R infinyon/fluvio --clobber dev k8-util/helm/pkg_app/*.*
          gh release upload -R infinyon/fluvio --clobber dev k8-util/helm/pkg_sys/*.*


  publish_github_binaries:
    name: Publish to GitHub Releases dev (${{ matrix.artifact }}-${{ matrix.rust-target }})
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs: 
      - bump_github_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-target:
          - aarch64-unknown-linux-musl
          - aarch64-apple-darwin
          - armv7-unknown-linux-gnueabihf
          - arm-unknown-linux-gnueabihf
          - x86_64-apple-darwin
          - x86_64-unknown-linux-musl
        artifact: [fluvio]
        include:
          - rust-target: x86_64-unknown-linux-musl
            artifact: fluvio-run
#          - rust-target: x86_64-pc-windows-msvc
#            artifact: fluvio.exe
    permissions: write-all
    steps:
      - name: Login GH CLI
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact }}-${{ matrix.rust-target }}
      - name: Publish artifact
        run: |
          ls -la
          echo "${{ matrix.rust-target }}" > .target
          zip "${{ matrix.artifact }}-${{ matrix.rust-target }}.zip" "${{ matrix.artifact }}" .target
          gh release upload -R infinyon/fluvio --clobber dev "${{ matrix.artifact }}-${{ matrix.rust-target }}.zip"

  # Job that follows the success of all required jobs in this workflow.
  # Used by Bors to detect that all required jobs have completed successfully
  done:
    name: Done
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs: [publish_github_binaries,publish_github_helm_pkg]
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: echo "Done!"
