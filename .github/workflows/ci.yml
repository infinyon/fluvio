# Build platform and run smoke test
name: CI

permissions: read-all

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

on:
  merge_group:
  pull_request:
    branches: [master]
    paths:
      - "**"
      - "!/*.md"
      - "!/**.md"
      - "!/rfc/**"
  workflow_dispatch:
    inputs:
      verbose:
        description: "Set --verbose to get verbose build output"
        required: false
        default: ""

env:
  CARGO_TERM_COLOR: always
  VERBOSE: ${{ github.events.input.verbose }}
  K3D_VERSION: v5.4.9
  BATS_VERSION: 1.9.0
  MINIKUBE_VERSION: v1.30.1
  K8_VERSION: v1.26.3
  TLS_ARGS: --tls --domain fluvio.local --server-key ./tls/certs/server.key --server-cert ./tls/certs/server.crt --ca-cert ./tls/certs/ca.crt --client-cert ./tls/certs/client-root.crt --client-key ./tls/certs/client-root.key
  AUTH_FILE: crates/fluvio-sc/test-data/auth_config/policy.json
  X509_SCOPE_FILE: crates/fluvio-sc/test-data/auth_config/scopes.json
  FLV_CLUSTER_PROVISION_TIMEOUT: 600
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # build other binaries which doesn't need test
  build_binaries:
    name: Build ${{ matrix.binary }} for ${{ matrix.rust-target }} on (${{ matrix.os }})
    if: github.event_name == 'merge_group'
    runs-on: ${{ matrix.os }}
    strategy:
      #    fail-fast: false
      matrix:
        include:
          # fluvio
          - os: ubuntu-latest
            rust-target: arm-unknown-linux-gnueabihf
            binary: fluvio
          - os: ubuntu-latest
            rust-target: armv7-unknown-linux-gnueabihf
            binary: fluvio
          - os: ubuntu-latest
            rust-target: armv7-unknown-linux-gnueabihf
            binary: fluvio-run

          # fluvio-channel
          - os: ubuntu-latest
            rust-target: arm-unknown-linux-gnueabihf
            binary: fluvio-channel
          - os: ubuntu-latest
            rust-target: armv7-unknown-linux-gnueabihf
            binary: fluvio-channel

          # fbm
          - os: ubuntu-latest
            rust-target: arm-unknown-linux-gnueabihf
            binary: fbm
          - os: ubuntu-latest
            rust-target: armv7-unknown-linux-gnueabihf
            binary: fbm

          # fvm
          - os: ubuntu-latest
            rust-target: arm-unknown-linux-gnueabihf
            binary: fvm
          - os: ubuntu-latest
            rust-target: armv7-unknown-linux-gnueabihf
            binary: fvm

    env:
      RUST_BACKTRACE: full
      TARGET: ${{ matrix.rust-target }}
      RUST_BIN_DIR: target/${{ matrix.rust-target }}/debug
      RELEASE_NAME: debug
    steps:
      - uses: actions/checkout@v4

      # If this job is being run by merge_group,
      # then build and run in release mode
      - name: Set RELEASE mode
        if: github.event_name == 'merge_group'
        shell: bash
        run: |
          echo "RELEASE=true" | tee -a $GITHUB_ENV
          echo "RELEASE_NAME=release" | tee -a $GITHUB_ENV
          echo "RUST_BIN_DIR=target/${{ matrix.rust-target }}/release" | tee -a $GITHUB_ENV

      - name: Print env
        run: |
          echo "RUST_BIN_DIR = ${{ env.RUST_BIN_DIR }} "
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
      - name: install Rust target
        run: rustup target add ${{ matrix.rust-target }}
      - name: Install zig
        run: ./actions/zig-install.sh ${{ matrix.os }}
      - name: Install NASM
        if: matrix.rust-target  == 'x86_64-pc-windows-gnu'
        uses: ilammy/setup-nasm@v1
      - uses: Swatinem/rust-cache@v2
        timeout-minutes: 10
        with:
          key: ${{ matrix.os }}-${{ matrix.rust-target }}-${{ matrix.binary }}
      - name: Install Helm for Mac
        run: brew install helm
        if: matrix.binary == 'fluvio' && matrix.os == 'macos-12'

      - name: Build fluvio
        timeout-minutes: 40
        if: matrix.binary == 'fluvio'
        run: make build-cli

      - name: Install mingw gcc
        if: matrix.rust-target  == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update -o="APT::Acquire::Retries=3"
          sudo apt-get install -y -V -o="APT::Acquire::Retries=3" gcc-mingw-w64-x86-64

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3

      - name: Build fluvio.exe
        timeout-minutes: 40
        if: matrix.binary == 'fluvio.exe'
        run: make build-cli-minimal

      - name: Build fluvio-run
        timeout-minutes: 40
        if: matrix.binary == 'fluvio-run'
        run: make build-cluster

      - name: Build fluvio-channel
        timeout-minutes: 40
        if: matrix.binary == 'fluvio-channel'
        run: make build-channel

      - name: Build fluvio-channel.exe
        timeout-minutes: 40
        if: matrix.binary == 'fluvio-channel.exe'
        run: make build-channel

      - name: Build smdk
        timeout-minutes: 40
        if: matrix.binary == 'smdk'
        run: make build-smdk

      - name: Build smdk.exe
        timeout-minutes: 40
        if: matrix.binary == 'smdk.exe'
        run: make build-smdk

      - name: Build cdk
        timeout-minutes: 40
        if: matrix.binary == 'cdk'
        run: make build-cdk

      - name: Build fbm
        timeout-minutes: 40
        if: matrix.binary == 'fbm'
        run: make build-fbm

      - name: Build fbm.exe
        timeout-minutes: 40
        if: matrix.binary == 'fbm.exe'
        run: make build-fbm

      - name: Build fvm
        timeout-minutes: 40
        if: matrix.binary == 'fvm' || matrix.binary == 'fvm.exe'
        run: make build-fvm

      # Upload artifacts
      - name: Upload artifact - ${{ matrix.binary }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary }}-${{ matrix.rust-target }}
          path: ${{ env.RUST_BIN_DIR }}/${{ matrix.binary }}
          retention-days: 1
