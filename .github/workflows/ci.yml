name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      verbose:
        description: "Set --verbose to get verbose build output"
        required: false
        default: ''

env:
#  VERBOSE: ${{ github.events.input.verbose }}
  VERBOSE: --verbose

jobs:
  cancel_previous_runs:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

  rustfmt:
    name: Rustfmt (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 300M
      SCCACHE_DIR: /home/runner/.cache/sccache
      SCCACHE_IDLE_TIMEOUT: 0
      FLV_SOCKET_WAIT: 600
      RUSTV: ${{ matrix.rust }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Check rustfmt
        run: make check-fmt

  tests:
    name: ${{ matrix.make.name }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
        make:
          - name: Clippy
            task: "check-clippy"
          - name: Unit tests
            task: "build-all-test run-all-unit-test"
          - name: Doc tests
            task: "run-all-doc-test"
        include:
          - os: ubuntu-latest
            sccache-path: /home/runner/.cache/sccache
          - os: macos-latest
            sccache-path: /Users/runner/Library/Caches/Mozilla.sccache
        exclude:
          - os: macos-latest
            rust: stable
            make:
              name: Clippy
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      RUSTV: ${{ matrix.rust }}
      SCCACHE_CACHE_SIZE: 2G
      SCCACHE_DIR: ${{ matrix.sccache-path }}
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
    steps:
      - uses: actions/checkout@v2
      - name: Install sccache (ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.13
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install sccache (macos-latest)
        if: matrix.os == 'macos-latest'
        run: brew install sccache
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Save sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ${{ matrix.sccache-path }}
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sccache-
      - name: Start sccache server
        run: sccache --start-server
      - name: ${{ matrix.make.name }}
        run: make ${{ matrix.make.task }}
      - name: Print sccache stats
        run: sccache --show-stats
      - name: Stop sccache server
        run: sccache --stop-server || true

  cluster_test:
    name: Cluster test (${{ matrix.os }}, ${{ matrix.test }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [infinyon-ubuntu-bionic, macos-latest]
        rust: [stable]
        kubernetes-version: [1.19.6]
        test: [local, k8]
        include:
          - os: infinyon-ubuntu-bionic
            minikube-driver: docker
            logs-dir: /tmp
            target: x86_64-unknown-linux-musl
            release: true
          - os: infinyon-ubuntu-bionic
            k8: true
          - os: macos-latest
            minikube-driver: virtualbox
            logs-dir: /usr/local/var/log/fluvio
            target: x86_64-apple-darwin
        exclude:
          - os: macos-latest
            test: k8
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 2G
      FLUVIO_CMD: true
      FLV_SOCKET_WAIT: 600
      FLV_TEST_CONSUMER_WAIT: 120000
      TARGET: ${{ matrix.target }}
      RELEASE: ${{ matrix.release }}
    steps:
      - uses: actions/checkout@v2
      - name: Install sccache (macos-latest)
        if: matrix.os == 'macos-latest'
        run: brew install sccache
      - name: Install helm (macos-latest)
        if: matrix.os == 'macos-latest'
        run: actions/ci-replace-helm.sh
        env:
          HELM_VERSION: v3.3.4
          OS: ${{ matrix.os }}
      - name: Check helm version
        run: helm version
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Install Minikube (macos-latest)
        if: matrix.os == 'macos-latest'
        run: brew install minikube
      - name: Setup Minikube
        run: |
          pkill -f "minikube tunnel" || true
          minikube delete || true
          minikube start --driver=${{ matrix.minikube-driver }} --kubernetes-version=${{ matrix.kubernetes-version }}
          nohup minikube tunnel --alsologtostderr >/tmp/tunnel.out 2>/tmp/tunnel.out &
      - name: Test minikube
        run: |
          minikube profile list
          minikube status
      - name: Build Test
        run: make RELEASE=release build_test

        # Flow for local cluster test
      - name: Setup installation pre-requisites (local)
        if: ${{ !matrix.k8 }}
        run: ./target/release/fluvio cluster start --setup --local --develop
      - name: Run smoke-test (local)
        if: ${{ !matrix.k8 }}
        timeout-minutes: 1
        run: make RELEASE=true UNINSTALL=noclean smoke-test-tls-root

        # Flow for Kubernetes cluster test
      - name: Setup installation pre-requisites (k8)
        if: ${{ matrix.k8 }}
        run: ./target/release/fluvio cluster start --setup --develop
      - name: Make Fluvio image (k8)
        if: ${{ matrix.k8 }}
        run: make minikube_image
      - name: Run smoke-test (k8)
        if: ${{ matrix.k8 }}
        timeout-minutes: 5
        run: make UNINSTALL=noclean smoke-test-k8-tls-root

      - name: Build examples
        run: examples/tests/build.sh --release
      - name: Test examples
        timeout-minutes: 1
        run: examples/tests/run.sh --release
      - name: Stop sccache server
        run: sccache --stop-server || true
      - name: Delete minikube
        run: minikube delete

        # Upload logs if any previous step failed
      - name: Save SC logs (k8)
        if: ${{ failure() && matrix.k8 }}
        run: |
          echo "minikube profile list"
          minikube profile list
          echo "helm list"
          helm list
          echo "get statefulset"
          kubectl get statefulset
          echo "kubectl get pvc"
          kubectl get pvc
          echo "kubectl get pods"
          kubectl get pods
          echo "kubectl get svc"
          kubectl get svc
          kubectl logs -l app=fluvio-sc > /tmp/flv_sc.log

      - name: Upload SC logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        timeout-minutes: 5
        with:
          name: fluvio-sc-logs
          path: ${{ matrix.logs-dir }}/flv_sc.log

      - name: Upload SPU logs
        if: failure()
        uses: actions/upload-artifact@v2
        timeout-minutes: 5
        with:
          name: fluvio-spu-logs
          path: ${{ matrix.logs-dir }}/spu_log_5001.log

#  k8_cluster_test:
#    name: Kubernetes cluster test
#    if: false
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [infinyon-ubuntu-bionic]
#        rust: [stable]
#    env:
#      FLUVIO_CMD: true
#      FLV_SOCKET_WAIT: 600
#      FLV_CLUSTER_MAX_SC_VERSION_LOOP: 120
#      FLV_CLUSTER_MAX_SC_NETWORK_LOOP: 60
#      FLV_TEST_CONSUMER_WAIT: 300000
#    steps:
#      - uses: actions/checkout@v2
#      - run: helm version
#      - name: Install ${{ matrix.rust }}
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: ${{ matrix.rust }}
#          profile: minimal
#          override: true
#      - name: Setup Minikube for Linux
#        if: startsWith(matrix.os, 'infinyon-ubuntu')
#        run: |
#          pkill -f "minikube tunnel" || true
#          minikube delete
#          minikube start --driver=docker --kubernetes-version 1.19.6
#          nohup  minikube tunnel --alsologtostderr > /tmp/tunnel.out 2> /tmp/tunnel.out &
#      - name: Test minikube
#        run: |
#          minikube profile list
#          minikube status
#      - name: Build
#        run: |
#          make RELEASE=release TARGET=x86_64-unknown-linux-musl build_test
#      - name: Setup installation pre-requisites
#        run: |
#          make RELEASE=true TARGET=x86_64-unknown-linux-musl  k8-setup
#      - name: Make image
#        run: make RELEASE=true minikube_image
#      - name: Run smoke-test-k8-tls-root
#        timeout-minutes: 5
#        run: |
#          make RELEASE=true TARGET=x86_64-unknown-linux-musl UNINSTALL=noclean smoke-test-k8-tls-root
#      - name: Clean minikube
#        run: |
#          minikube delete
#          pkill -f "minikube tunnel" || true
#      - name: Save logs
#        if: failure()
#        run: |
#          echo "minikube profile list"
#          minikube profile list
#          echo "helm list"
#          helm list
#          echo "get statefulset"
#          kubectl get statefulset
#          echo "kubectl get pvc"
#          kubectl get pvc
#          echo "kubectl get pods"
#          kubectl get pods
#          echo "kubectl get svc"
#          kubectl get svc
#          kubectl logs -l app=fluvio-sc > /tmp/flv_sc.log
#      - name: Upload logs
#        timeout-minutes: 5
#        if: failure()
#        uses: actions/upload-artifact@v2
#        with:
#          name: fluvio-k8-logs
#          path: /tmp/flv_sc.log
