name: Hourly tests 

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:
jobs:
  hourly:
    name: ${{ matrix.test.name }} (${{ matrix.cluster_type }} ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        cluster_type: [local, k8]
        test:
          - name: smoke 
            cmd: cargo run --release --bin flv-test -- smoke --develop --disable-install -- --producer-iteration ${SMOKE_PRODUCER_ITERATION} --producer-record-size ${SMOKE_PRODUCER_RECORD_SIZE} 
            producer_iteration: [100]
            producer_record_size: [1000]
          - name: producer stress (benchmark mode)
            cmd: cargo run --release --bin flv-test -- producer_stress --develop --disable-install --benchmark -- --iteration 5 --producers 5 
        include:
          - os: ubuntu-latest
            sccache-path: /home/runner/.cache/sccache
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      RUSTV: ${{ matrix.rust }}
      SCCACHE_CACHE_SIZE: 2G
      SCCACHE_DIR: ${{ matrix.sccache-path }}
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
    steps:
      - uses: actions/checkout@v2
      #- Install rust
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      #- Install minikube
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.1
        with:
          minikube version: 'v1.16.0'
          kubernetes version: 'v1.19.2'
      #- Install helm
      - name: Install Helm
        run: actions/ci-replace-helm.sh
        env:
          HELM_VERSION: v3.3.4
          OS: ${{ matrix.os }}
      #- Install and start Fluvio

      - name: Install and start Fluvio cluster (${{ matrix.cluster_type }})
        if: matrix.cluster_type == 'local'
        run: |
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash
          ~/.fluvio/bin/fluvio cluster start --local

      - name: Install and start Fluvio cluster (${{ matrix.cluster_type }})
        if: matrix.cluster_type == 'k8'
        run: |
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash
          ~/.fluvio/bin/fluvio cluster start

      - name: Install sccache (ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.13
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install sccache (macos-latest)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install sccache
      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Save sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ${{ matrix.sccache-path }}
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sccache-
      - name: Start sccache server
        run: sccache --start-server

      # Run test
      - name: ${{ matrix.test.name }}
        if: matrix.test.name != 'smoke'
        run: ${{ matrix.test.cmd }}

      - name: ${{ matrix.test.name }}
        if: matrix.test.name == 'smoke'
        env:
          SMOKE_PRODUCER_ITERATION: ${{ matrix.test.producer_iteration }}
          SMOKE_PRODUCER_RECORD_SIZE: ${{ matrix.test.producer_record_size }}
        run: ${{ matrix.test.cmd }}

      - name: Print sccache stats
        run: sccache --show-stats
      - name: Stop sccache server
        run: sccache --stop-server || true 