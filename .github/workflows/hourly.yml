name: Hourly tests

permissions:
  contents: read

on:
  #schedule:
  #  - cron: '0 * * * *'
  workflow_dispatch:
jobs:
  hourly:
    timeout-minutes: 20
    name: ${{ matrix.test.name }} (${{ matrix.cluster_type }} ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [infinyon-ubuntu-bionic]
        rust: [stable]
        cluster_type: [local, k8]
        smoke_producer_iteration: [100]
        smoke_producer_record_size: [1000]
        test:
          - name: smoke 
            cmd: cargo run --release --bin flv-test -- smoke --develop --disable-install --timeout 600 -- --producer-iteration $SMOKE_PRODUCER_ITERATION --producer-record-size $SMOKE_PRODUCER_RECORD_SIZE 
          - name: producer stress (benchmark mode)
            cmd: cargo run --release --bin flv-test -- producer_stress --develop --disable-install --benchmark ---timeout 600 -- --iteration 5 --producers 5 
    env:
      FLUVIO_CMD: true
      FLV_SOCKET_WAIT: 600
      FLV_CLUSTER_MAX_SC_VERSION_LOOP: 120
      FLV_CLUSTER_MAX_SC_NETWORK_LOOP: 60
      FLV_TEST_CONSUMER_WAIT: 300000
    steps:
      - uses: actions/checkout@v2
      - run: helm version
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Setup Minikube for Linux
        if: startsWith(matrix.os, 'infinyon-ubuntu')
        run: |
          pkill -f "minikube tunnel" || true
          minikube delete
          minikube start --driver=docker --kubernetes version: 1.21.2
          nohup  minikube tunnel --alsologtostderr > /tmp/tunnel.out 2> /tmp/tunnel.out &
      - name: Test minikube
        run: |
          minikube profile list
          minikube status

      #- Install and start Fluvio
      - name: Install and start Fluvio cluster (${{ matrix.cluster_type }})
        if: matrix.cluster_type == 'local'
        run: |
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash
          ~/.fluvio/bin/fluvio cluster start --local
          ~/.fluvio/bin/fluvio version

      - name: Install and start Fluvio cluster (${{ matrix.cluster_type }})
        if: matrix.cluster_type == 'k8'
        run: |
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash
          ~/.fluvio/bin/fluvio cluster start
          ~/.fluvio/bin/fluvio version

      # Run test
      - name: ${{ matrix.test.name }}
        if: ${{ matrix.test.name != 'smoke' }}
        run: ${{ matrix.test.cmd }}
        timeout-minutes: 15

      - name: Smoke test
        if: ${{ matrix.test.name == 'smoke' }}
        env:
          SMOKE_PRODUCER_ITERATION: ${{ matrix.smoke_producer_iteration }}
          SMOKE_PRODUCER_RECORD_SIZE: ${{ matrix.smoke_producer_record_size }}
        run: ${{ matrix.test.cmd }}
        timeout-minutes: 15
        
      - name: Clean minikube
        run: |
          minikube delete
          pkill -f "minikube tunnel" || true
      - name: Save logs
        if: failure()
        run: |
          echo "minikube profile list"
          minikube profile list
          echo "helm list"
          helm list
          echo "get statefulset"
          kubectl get statefulset
          echo "kubectl get pvc"
          kubectl get pvc
          echo "kubectl get pods"
          kubectl get pods
          echo "kubectl get svc"
          kubectl get svc
          echo "kubectl get spu"
          kubectl get spu
          echo "kubectl get spg"
          kubectl get spg
          kubectl logs -l app=fluvio-sc > /tmp/flv_sc.log
      - name: Upload logs
        timeout-minutes: 5
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: fluvio-k8-logs
          path: /tmp/flv_sc.log

