name: Release

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      force:
        required: false
        description: 'If non-empty, extra force will be used push this release'
        default: ''
      commit:
        required: false 
        description: 'Fluvio git commit override (latest `master` by default)'
        default: ''
      installer_version:
        required: false
        description: ''
        default: ''
env:
  USE_COMMIT: ${{ github.event.inputs.commit }}
  FORCE_RELEASE: ${{ github.event.inputs.force }}

jobs:
  setup_job:
    name: Setup workflow
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version_step.outputs.VERSION }}
      TARGET_SHA: ${{ steps.version_step.outputs.GIT_SHA }}
      LATEST_TAG: ${{ steps.docker_step.outputs.LATEST_TAG }}
      RELEASE_TAG: ${{ steps.docker_step.outputs.RELEASE_TAG }}
    steps:
      - name: Set target sha and Fluvio version
        id: version_step
        run: |
          if [[ -z "${{ env.USE_COMMIT }}" ]]; then
            export GITHUB_VERSION=$(curl -fsS https://raw.githubusercontent.com/infinyon/fluvio/${{ github.sha }}/VERSION)
            echo "VERSION=${GITHUB_VERSION}" | tee -a $GITHUB_ENV
            echo "::set-output name=VERSION::${GITHUB_VERSION}"
            echo "GIT_SHA=${{ github.sha }}" | tee -a $GITHUB_ENV
            echo "::set-output name=GIT_SHA::${{ github.sha }}"
          else
            export GITHUB_VERSION=$(curl -fsS https://raw.githubusercontent.com/infinyon/fluvio/${{ github.event.inputs.commit }}/VERSION)
            echo "VERSION=${GITHUB_VERSION}" | tee -a $GITHUB_ENV
            echo "::set-output name=VERSION::${GITHUB_VERSION}"
            echo "GIT_SHA=${{ github.event.inputs.commit }}" | tee -a $GITHUB_ENV
            echo "::set-output name=GIT_SHA::${{ github.event.inputs.commit }}"
          fi
      - name: Set Docker tag related env vars
        id: docker_step
        run: |
            echo "::set-output name=LATEST_TAG::infinyon/fluvio:${{ env.VERSION }}-${{ env.GIT_SHA }}"
            echo "::set-output name=RELEASE_TAG::infinyon/fluvio:${{ env.VERSION }}"

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Check for Github Release
  release_github:
    name: Release Fluvio to GitHub Release
    needs: [setup_job]
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      VERSION: ${{ needs.setup_job.outputs.VERSION }}
    steps:
      - name: Login GH CLI
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})

      # Check that this release does not already exist by trying to download it
      - name: Attempt to download release by version number 
        id: release_check
        continue-on-error: true
        run: gh release download -R infinyon/fluvio "v${{ env.VERSION }}"

      # If this release does not already exist (i.e. the release_check failed), create it
      - uses: actions/checkout@v2
        if: ${{ steps.release_check.outcome == 'failure' }}
      - name: Download artifacts from dev
        if: ${{ steps.release_check.outcome == 'failure' }}
        run: gh release download -R infinyon/fluvio dev
      - name: Create GH Release
        if: ${{ steps.release_check.outcome == 'failure' }}
        run: |
          # Create temporary directory to download all artifacts
          mkdir tmp-release && cd tmp-release
          gh release download -R infinyon/fluvio dev

          ARTIFACTS=(./*)
          gh release create -R infinyon/fluvio \
            --title="v${{ env.VERSION }}" \
            -F ../CHANGELOG.md \
            "v${{ env.VERSION }}" \
            "${ARTIFACTS[@]}"

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  ## Check for docker image
  release_docker:
    name: Release Docker Image
    needs: [setup_job]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.setup_job.outputs.VERSION }}
      RELEASE_TAG: ${{ needs.setup_job.outputs.RELEASE_TAG }}
      LATEST_TAG: ${{ needs.setup_job.outputs.LATEST_TAG }}
    steps:
      - name: Attempt to pull image tag in docker registry
        id: docker_check
        continue-on-error: true
        run: |
          if docker pull ${{ env.RELEASE_TAG }}; then
            if [[ -z ${{ env.FORCE_RELEASE }} ]]; then
              echo "Image tag already exists"
            else
              exit 1
            fi
          else
            exit 1
          fi
      # if the check fails, then continue
      - name: Login to Docker Hub
        if: ${{ steps.docker_check.outcome == 'failure' }}
        run: docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
      - name: Tag and push release image
        if: ${{ steps.docker_check.outcome == 'failure' }}
        run: |
          if [ ! -z "${{ env.FORCE_RELEASE }}" ] || docker pull "${{ env.RELEASE_TAG }}"; then
            [ ! -z "${{ env.FORCE_RELEASE }}" ] && echo "Release w/ force..."
            echo "Release image already exists";
          else
            docker manifest create "docker.io/${{ env.RELEASE_TAG }}" \
              "docker.io/${{ env.LATEST_TAG }}-amd64" \
              "docker.io/${{ env.LATEST_TAG }}-arm64v8" 
            docker manifest push "docker.io/${{ env.RELEASE_TAG }}"
          fi

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


  # Check for Fluvio CLI
  release_fluvio:
    name: Release Fluvio CLI package
    needs: [setup_job]
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      VERSION: ${{ needs.setup_job.outputs.VERSION }}
    steps:
      # Check that this release does not already exist by trying to download it
      - name: Attempt to install Fluvio CLI
        id: check_fluvio
        continue-on-error: true
        run: curl -fsS https://packages.fluvio.io/v1/install.sh | VERSION=${{ env.VERSION }} bash

      # If this release does not already exist (i.e. check_fluvio failed), continue
      - name: Login GH CLI
        if: ${{ steps.check_fluvio.outcome == 'failure' }}
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
      - name: Install fluvio-package
        run: |
          unset VERSION
          if [ -n "${{ github.event.inputs.installer_version }}" ]; then
              export VERSION=${{ github.event.inputs.installer_version }}
              echo "VERSION=$VERSION"
          fi
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash
          ${HOME}/.fluvio/bin/fluvio install fluvio-package

      - name: Download dev release
        if: ${{ steps.check_fluvio.outcome == 'failure' }}
        run: gh release download dev -R infinyon/fluvio

        # Publish artifacts from GH Releases to Fluvio Packages
        #
        # Artifacts from GH Releases look like this:
        #
        # ./
        #   ARTIFACT-TARGET.zip, such as:
        #   fluvio-x86_64-unknown-linux-musl.zip
        #   fluvio-aarch64-unknown-linux-musl.zip
        #   fluvio-x86_64-apple-darwin.zip
        #
        # Here, we extract each zip into dirs with the same name.
        # Then, we get the TARGET from the `.target` file inside.
        #
        # ./
        #   ARTIFACT-TARGET.zip
        #   ARTIFACT-TARGET/
        #     ARTIFACT
        #     .target
        #   fluvio-x86_64-unknown-linux-musl.zip
        #   fluvio-x86_64-unknown-linux-musl/
        #     fluvio
        #     .target
      - name: Publish artifacts
        if: ${{ steps.check_fluvio.outcome == 'failure' }}
        run: |
          for ZIP_FILE in ./*.zip; do
            # Don't publish `fluvio-test` artifact outside of github
            [ "$ZIP_FILE" = "./fluvio-test-x86_64-unknown-linux-musl.zip" ] && echo "Skipping fluvio-test" && continue

            # Unzip all .zip files into directories with the same name (minus .zip)
            UNZIP_DIR="${ZIP_FILE//.zip/}"
            echo "Unzipping $ZIP_FILE into $UNZIP_DIR"
            unzip "$ZIP_FILE" -d "$UNZIP_DIR"

            TARGET="$(cat ${UNZIP_DIR}/.target)"
            ARTIFACT="$(echo ${UNZIP_DIR} | sed -e "s/-$TARGET$//")"
            PACKAGE="$(echo ${ARTIFACT} | sed -e "s/^\.\///" -e "s/\.exe$//")"
            echo "TARGET=$TARGET"
            echo "ARTIFACT=$ARTIFACT"
            echo "PACKAGE=$PACKAGE"

            ${HOME}/.fluvio/bin/fluvio package publish \
              --force \
              --package="${PACKAGE}" \
              --version="${VERSION}" \
              --target="${TARGET}" \
              "${UNZIP_DIR}/${ARTIFACT}"
          done

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  bump_stable_fluvio:
    name: Bump stable Fluvio
    needs: [setup_job, release_github, release_docker, release_fluvio]
    #permissions: write-all
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      VERSION: ${{ needs.setup_job.outputs.VERSION }}
      TARGET_SHA: ${{ needs.setup_job.outputs.GIT_SHA }}
    steps:
      - name: Install fluvio-package
        run: |
          if [ -n "${{ github.event.inputs.installer_version }}" ]; then
              export VERSION=${{ github.event.inputs.installer_version }}
              echo "VERSION=$VERSION"
          fi
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash
          ${HOME}/.fluvio/bin/fluvio install fluvio-package

      - name: Bump Fluvio CLI
        # This should work until we support graceful failure
        continue-on-error: true
        run: |
          ${HOME}/.fluvio/bin/fluvio package bump dynamic "${{ env.VERSION }}"
          ${HOME}/.fluvio/bin/fluvio package tag "fluvio:${{ env.VERSION }}" --tag=stable --force

      - uses: actions/checkout@v2

      # Enable this when we are confident in the workflow
      - name: Bump stable branch
        run: |
          git fetch
          CURRENT_STABLE=$(git rev-parse origin/stable)

          echo "sha from repo: $CURRENT_STABLE"
          echo "expected sha: ${{ env.TARGET_SHA }}"

          if [[ "$CURRENT_STABLE" = "${{ env.TARGET_SHA }}" ]]; then
            echo "Stable branch is up to date"
          else
            # FIXME: Needs more testing in Github Actions context
            echo "TODO: Stable branch will be updated"
            #git checkout stable
            #git rebase origin/master
            #git push origin stable
          fi

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  publish_crates:
    name: Publish crates to crates.io 
    strategy:
      matrix:
        rust: [stable]
    needs: [bump_stable_fluvio]
    runs-on: ubuntu-latest
    #permissions: write-all
    steps:
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - uses: actions/checkout@v2

      - name: Run publish script
        env:
          VERBOSE: true
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          ./release-scripts/publish-crates.sh

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}