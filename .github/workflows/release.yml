name: Release

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      force:
        required: false
        description: 'If non-empty, extra force will be used push this release'
        default: ''
      commit:
        required: false 
        description: 'Fluvio git commit override (latest `master` by default)'
        default: ''
env:
  USE_COMMIT: ${{ github.event.inputs.commit }}
  FORCE_RELEASE: ${{ github.event.inputs.force }}

jobs:
  setup_job:
    name: Setup workflow
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version_step.outputs.VERSION }}
      TARGET_SHA: ${{ steps.version_step.outputs.GIT_SHA }}
      LATEST_TAG: ${{ steps.docker_step.outputs.LATEST_TAG }}
      RELEASE_TAG: ${{ steps.docker_step.outputs.RELEASE_TAG }}
    steps:
      - name: Set target sha and Fluvio version
        id: version_step
        run: |
          if [[ -z "${{ env.USE_COMMIT }}" ]]; then
            export GITHUB_VERSION=$(curl -fsS https://raw.githubusercontent.com/infinyon/fluvio/${{ github.sha }}/VERSION)
            echo "VERSION=${GITHUB_VERSION}" | tee -a $GITHUB_ENV
            echo "::set-output name=VERSION::${GITHUB_VERSION}"
            echo "GIT_SHA=${{ github.sha }}" | tee -a $GITHUB_ENV
            echo "::set-output name=GIT_SHA::${{ github.sha }}"
          else
            export GITHUB_VERSION=$(curl -fsS https://raw.githubusercontent.com/infinyon/fluvio/${{ github.event.inputs.commit }}/VERSION)
            echo "VERSION=${GITHUB_VERSION}" | tee -a $GITHUB_ENV
            echo "::set-output name=VERSION::${GITHUB_VERSION}"
            echo "GIT_SHA=${{ github.event.inputs.commit }}" | tee -a $GITHUB_ENV
            echo "::set-output name=GIT_SHA::${{ github.event.inputs.commit }}"
          fi
      - name: Set Docker tag related env vars
        id: docker_step
        run: |
            echo "::set-output name=LATEST_TAG::infinyon/fluvio:${{ env.VERSION }}-${{ env.GIT_SHA }}"
            echo "::set-output name=RELEASE_TAG::infinyon/fluvio:${{ env.VERSION }}"

  # Check for Github Release
  release_github:
    name: Release Fluvio to GitHub Release
    needs: [setup_job]
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      VERSION: ${{ needs.setup_job.outputs.VERSION }}
    steps:
      - name: Login GH CLI
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
      - name: Attempt to download release by version number 
        id: release_check
        continue-on-error: true
        run: |
          gh release download -R infinyon/fluvio "v${{ env.VERSION }}"
      # if the check fails, then continue with release
      - uses: actions/checkout@v2
        if: ${{ steps.release_check.outcome == 'failure' }}
      - name: Download artifacts from dev
        if: ${{ steps.release_check.outcome == 'failure' }}
        run: gh release download -R infinyon/fluvio dev
      - name: Create GH Release
        if: ${{ steps.release_check.outcome == 'failure' }}
        run: |
          gh release create -R infinyon/fluvio --title="v${{ env.VERSION }}" -F ./CHANGELOG.md "v${{ env.VERSION }}" \
            fluvio-x86_64-unknown-linux-musl \
            fluvio-x86_64-apple-darwin \
            fluvio-run-x86_64-unknown-linux-musl \
            fluvio-run-x86_64-apple-darwin

  ## Check for docker image
  release_docker:
    name: Release Docker Image
    needs: [setup_job]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.setup_job.outputs.VERSION }}
      RELEASE_TAG: ${{ needs.setup_job.outputs.RELEASE_TAG }}
      LATEST_TAG: ${{ needs.setup_job.outputs.LATEST_TAG }}
    steps:
      - name: Attempt to pull image tag in docker registry
        id: docker_check
        continue-on-error: true
        run: |
          if docker pull ${{ env.RELEASE_TAG }}; then
            if [[ -z ${{ env.FORCE_RELEASE }} ]]; then
              echo "Image tag already exists"
            else
              exit 1
            fi
          else
            exit 1
          fi
      # if the check fails, then continue
      - name: Login to Docker Hub
        if: ${{ steps.docker_check.outcome == 'failure' }}
        run: docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
      - name: Tag and push release image
        if: ${{ steps.docker_check.outcome == 'failure' }}
        run: |
          if [ ! -z "${{ env.FORCE_RELEASE }}" ] || docker pull "${{ env.RELEASE_TAG }}"; then
            [ ! -z "${{ env.FORCE_RELEASE }}" ] && echo "Release w/ force..."
            echo "Release image already exists";
          else
            docker pull "${{ env.LATEST_TAG }}"
            docker tag "${{ env.LATEST_TAG }}" "${{ env.RELEASE_TAG }}"
            docker push "${{ env.RELEASE_TAG }}"
          fi

  # Publish the release Helm chart, tagged with the release VERSION.
  # Example tag: 0.7.4
  # This job requires the docker image step to have completed successfully.
  release_helm:
    name: Release Helm Chart
    needs: [setup_job, release_docker]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.setup_job.outputs.VERSION }}
    steps:
      - name: Check repo for Release charts
        continue-on-error: true
        id: helm_check
        run: |
          NUM_CHARTS=$(curl https://charts.fluvio.io/api/charts | jq '.[]' | jq '.[] | select(.version | test("^${{ env.VERSION }}$")) | @json' | wc -l)
          if [[ $NUM_CHARTS -eq 2 ]]; then
            echo "Release chart is published";
          else
            echo "Release chart NOT published";
            exit 1
          fi
      - uses: actions/checkout@v2
        if: ${{ steps.helm_check.outcome == 'failure' }}
      - name: Install Helm
        if: ${{ steps.helm_check.outcome == 'failure' }}
        env:
          HELM_VERSION: v3.3.4
          OS: ubuntu-latest
        run: actions/ci-replace-helm.sh
      - name: Publish helm charts
        if: ${{ steps.helm_check.outcome == 'failure' }}
        run: |
          helm plugin install https://github.com/chartmuseum/helm-push.git
          helm repo add chartmuseum https://gitops:${{ secrets.HELM_PASSWORD }}@charts.fluvio.io
          helm push k8-util/helm/fluvio-sys --force --version="${{ env.VERSION }}" chartmuseum
          helm push k8-util/helm/fluvio-app --force --version="${{ env.VERSION }}" chartmuseum

  # Check for Fluvio cli
  release_fluvio:
    name: Release Fluvio CLI package
    needs: [setup_job]
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      VERSION: ${{ needs.setup_job.outputs.VERSION }}
    steps:
      - name: Attempt to install Fluvio cli
        id: check_fluvio
        continue-on-error: true
        run: |
          curl -fsS https://packages.fluvio.io/v1/install.sh | VERSION=${{ env.VERSION }} bash

      # If the check fails, then continue
      - name: Login GH CLI
        if: ${{ steps.check_fluvio.outcome == 'failure' }}
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
      - name: Install fluvio-package
        run: |
          unset VERSION
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash
          ${HOME}/.fluvio/bin/fluvio install fluvio-package

      - name: Download dev release
        if: ${{ steps.check_fluvio.outcome == 'failure' }}
        run: gh release download dev -R infinyon/fluvio

      - name: Prepare artifacts for release
        if: ${{ steps.check_fluvio.outcome == 'failure' }}
        run: |
          mkdir -p target/x86_64-unknown-linux-musl/release/
          mv fluvio-x86_64-unknown-linux-musl target/x86_64-unknown-linux-musl/release/fluvio
          mv fluvio-run-x86_64-unknown-linux-musl target/x86_64-unknown-linux-musl/release/fluvio-run

          mkdir -p target/x86_64-apple-darwin/release/
          mv fluvio-x86_64-apple-darwin target/x86_64-apple-darwin/release/fluvio
          mv fluvio-run-x86_64-apple-darwin target/x86_64-apple-darwin/release/fluvio-run

      - name: Release to Fluvio Packages
        if: ${{ steps.check_fluvio.outcome == 'failure' }}
        run: |
          ${HOME}/.fluvio/bin/fluvio package publish \
            --force \
            --version="${{ env.VERSION }}" \
            target/x86_64-unknown-linux-musl/release/fluvio \
            target/x86_64-apple-darwin/release/fluvio

          ${HOME}/.fluvio/bin/fluvio package publish \
            --force \
            --version="${{ env.VERSION }}" \
            target/x86_64-unknown-linux-musl/release/fluvio-run \
            target/x86_64-apple-darwin/release/fluvio-run

  bump_stable_fluvio:
    name: Bump stable Fluvio
    needs: [setup_job, release_github, release_docker, release_helm, release_fluvio]
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      VERSION: ${{ needs.setup_job.outputs.VERSION }}
      TARGET_SHA: ${{ needs.setup_job.outputs.GIT_SHA }}
    steps:
      - name: Install fluvio-package
        run: |
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash
          ${HOME}/.fluvio/bin/fluvio install fluvio-package

      - name: Bump Fluvio CLI
        # This should work until we support graceful failure
        continue-on-error: true
        run: |
          ${HOME}/.fluvio/bin/fluvio package bump dynamic "${{ env.VERSION }}"

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Bump stable branch
        run: |
          git fetch
          CURRENT_STABLE=$(git rev-parse origin/stable)

          echo "sha from repo: $CURRENT_STABLE"
          echo "expected sha: ${{ env.TARGET_SHA }}"

          if [[ "$CURRENT_STABLE" = "${{ env.TARGET_SHA }}" ]]; then
            echo "Stable branch is up to date"
          else
            echo "Updating stable to master HEAD"
            git checkout stable
            git rebase origin/master
            git push origin stable
          fi
