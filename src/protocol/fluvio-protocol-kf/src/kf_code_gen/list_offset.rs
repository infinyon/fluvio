/// WARNING: CODE GENERATED FILE
/// * This file is generated by kfspec2code.
/// * Any changes applied to this file will be lost when a new spec is generated.
use serde::{Deserialize, Serialize};

use kf_protocol_api::ErrorCode;
use kf_protocol_api::Isolation;
use kf_protocol_api::Request;

use kf_protocol_derive::Decode;
use kf_protocol_derive::Encode;
use kf_protocol_derive::KfDefault;

// -----------------------------------
// KfListOffsetRequest
// -----------------------------------

#[derive(Encode, Decode, Serialize, Deserialize, KfDefault, Debug)]
pub struct KfListOffsetRequest {
    /// The broker ID of the requestor, or -1 if this request is being made by a normal consumer.
    pub replica_id: i32,

    /// This setting controls the visibility of transactional records. Using READ_UNCOMMITTED
    /// (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1),
    /// non-transactional and COMMITTED transactional records are visible. To be more concrete,
    /// READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable
    /// offset), and enables the inclusion of the list of aborted transactions in the result, which
    /// allows consumers to discard ABORTED transactional records
    #[fluvio_kf(min_version = 2)]
    pub isolation_level: Isolation,

    /// Each topic in the request.
    pub topics: Vec<ListOffsetTopic>,
}



#[derive(Encode, Decode, Serialize, Deserialize, KfDefault, Debug)]
pub struct ListOffsetTopic {
    /// The topic name.
    pub name: String,

    /// Each partition in the request.
    pub partitions: Vec<ListOffsetPartition>,
}

#[derive(Encode, Decode, Serialize, Deserialize, KfDefault, Debug)]
pub struct ListOffsetPartition {
    /// The partition index.
    pub partition_index: i32,

    /// The current leader epoch.
    #[fluvio_kf(min_version = 4)]
    pub current_leader_epoch: i32,

    /// The current timestamp.
    pub timestamp: i64,
}

// -----------------------------------
// KfListOffsetResponse
// -----------------------------------

#[derive(Encode, Decode, Serialize, Deserialize, KfDefault, Debug)]
pub struct KfListOffsetResponse {
    /// The duration in milliseconds for which the request was throttled due to a quota violation,
    /// or zero if the request did not violate any quota.
    #[fluvio_kf(min_version = 2, ignorable)]
    pub throttle_time_ms: i32,

    /// Each topic in the response.
    pub topics: Vec<ListOffsetTopicResponse>,
}





#[derive(Encode, Decode, Serialize, Deserialize, KfDefault, Debug)]
pub struct ListOffsetTopicResponse {
    /// The topic name
    pub name: String,

    /// Each partition in the response.
    pub partitions: Vec<ListOffsetPartitionResponse>,
}

#[derive(Encode, Decode, Serialize, Deserialize, KfDefault, Debug)]
pub struct ListOffsetPartitionResponse {
    /// The partition index.
    pub partition_index: i32,

    /// The partition error code, or 0 if there was no error.
    pub error_code: ErrorCode,

    /// The timestamp associated with the returned offset.
    #[fluvio_kf(min_version = 1)]
    pub timestamp: i64,

    /// The returned offset.
    #[fluvio_kf(min_version = 1)]
    pub offset: i64,

    #[fluvio_kf(min_version = 4)]
    pub leader_epoch: i32,
}

// -----------------------------------
// Implementation - KfListOffsetRequest
// -----------------------------------

impl Request for KfListOffsetRequest {
    const API_KEY: u16 = 2;

    const MIN_API_VERSION: i16 = 0;
    const MAX_API_VERSION: i16 = 5;
    const DEFAULT_API_VERSION: i16 = 5;

    type Response = KfListOffsetResponse;
}
