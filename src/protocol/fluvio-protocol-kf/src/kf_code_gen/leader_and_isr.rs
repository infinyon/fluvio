/// WARNING: CODE GENERATED FILE
/// * This file is generated by kfspec2code.
/// * Any changes applied to this file will be lost when a new spec is generated.
use serde::{Deserialize, Serialize};

use kf_protocol_api::ErrorCode;
use kf_protocol_api::Request;

use kf_protocol_derive::Decode;
use kf_protocol_derive::Encode;
use kf_protocol_derive::KfDefault;

// -----------------------------------
// KfLeaderAndIsrRequest
// -----------------------------------

#[derive(Encode, Decode, Serialize, Deserialize, KfDefault, Debug)]
pub struct KfLeaderAndIsrRequest {
    /// The current controller ID.
    pub controller_id: i32,

    /// The current controller epoch.
    pub controller_epoch: i32,

    /// The current broker epoch.
    #[fluvio_kf(min_version = 2, ignorable)]
    pub broker_epoch: i64,

    /// Each topic.
    #[fluvio_kf(min_version = 2)]
    pub topic_states: Vec<LeaderAndIsrRequestTopicState>,

    /// The state of each partition
    #[fluvio_kf(max_version = 1)]
    pub partition_states_v0: Vec<LeaderAndIsrRequestPartitionStateV0>,

    /// The current live leaders.
    pub live_leaders: Vec<LeaderAndIsrLiveLeader>,
}

#[derive(Encode, Decode, Serialize, Deserialize, KfDefault, Debug)]
pub struct LeaderAndIsrRequestTopicState {
    /// The topic name.
    #[fluvio_kf(min_version = 2)]
    pub name: String,

    /// The state of each partition
    pub partition_states: Vec<LeaderAndIsrRequestPartitionState>,
}

#[derive(Encode, Decode, Serialize, Deserialize, KfDefault, Debug)]
pub struct LeaderAndIsrRequestPartitionStateV0 {
    /// The topic name.
    #[fluvio_kf(max_version = 1)]
    pub topic_name: String,

    /// The partition index.
    #[fluvio_kf(max_version = 1)]
    pub partition_index: i32,

    /// The controller epoch.
    #[fluvio_kf(max_version = 1)]
    pub controller_epoch: i32,

    /// The broker ID of the leader.
    #[fluvio_kf(max_version = 1)]
    pub leader_key: i32,

    /// The leader epoch.
    #[fluvio_kf(max_version = 1)]
    pub leader_epoch: i32,

    /// The in-sync replica IDs.
    #[fluvio_kf(max_version = 1)]
    pub isr_replicas: Vec<i32>,

    /// The ZooKeeper version.
    #[fluvio_kf(max_version = 1)]
    pub zk_version: i32,

    /// The replica IDs.
    #[fluvio_kf(max_version = 1)]
    pub replicas: Vec<i32>,

    /// Whether the replica should have existed on the broker or not.
    #[fluvio_kf(min_version = 1, max_version = 1, ignorable)]
    pub is_new: bool,
}

#[derive(Encode, Decode, Serialize, Deserialize, KfDefault, Debug)]
pub struct LeaderAndIsrLiveLeader {
    /// The leader's broker ID.
    pub broker_id: i32,

    /// The leader's hostname.
    pub host_name: String,

    /// The leader's port.
    pub port: i32,
}

#[derive(Encode, Decode, Serialize, Deserialize, KfDefault, Debug)]
pub struct LeaderAndIsrRequestPartitionState {
    /// The partition index.
    pub partition_index: i32,

    /// The controller epoch.
    pub controller_epoch: i32,

    /// The broker ID of the leader.
    pub leader_key: i32,

    /// The leader epoch.
    pub leader_epoch: i32,

    /// The in-sync replica IDs.
    pub isr_replicas: Vec<i32>,

    /// The ZooKeeper version.
    pub zk_version: i32,

    /// The replica IDs.
    pub replicas: Vec<i32>,

    /// Whether the replica should have existed on the broker or not.
    #[fluvio_kf(min_version = 1, ignorable)]
    pub is_new: bool,
}

// -----------------------------------
// KfLeaderAndIsrResponse
// -----------------------------------

#[derive(Encode, Decode, Serialize, Deserialize, KfDefault, Debug)]
pub struct KfLeaderAndIsrResponse {
    /// The error code, or 0 if there was no error.
    pub error_code: ErrorCode,

    /// Each partition.
    pub partitions: Vec<LeaderAndIsrResponsePartition>,
}

#[derive(Encode, Decode, Serialize, Deserialize, KfDefault, Debug)]
pub struct LeaderAndIsrResponsePartition {
    /// The topic name.
    pub topic_name: String,

    /// The partition index.
    pub partition_index: i32,

    /// The partition error code, or 0 if there was no error.
    pub error_code: ErrorCode,
}

// -----------------------------------
// Implementation - KfLeaderAndIsrRequest
// -----------------------------------

impl Request for KfLeaderAndIsrRequest {
    const API_KEY: u16 = 4;

    const MIN_API_VERSION: i16 = 0;
    const MAX_API_VERSION: i16 = 2;
    const DEFAULT_API_VERSION: i16 = 2;

    type Response = KfLeaderAndIsrResponse;
}
