mod spec;
mod status;

pub mod store;
pub use self::spec::*;
pub use self::status::*;
pub use custom_metadata::CustomSpuKey;

#[cfg(feature = "k8")]
mod k8;
#[cfg(feature = "k8")]
pub use k8::*;


mod metadata {

    use crate::core::*;
    use super::*;

    impl Spec for SpuSpec {
        const LABEL: &'static str = "SPU";
        type IndexKey  = String;
        type Owner = Self;
        type Status = SpuStatus;
    }


    impl Status for SpuStatus {}
}
    
mod custom_metadata {

    use std::io::Error;
    use std::io::ErrorKind;

    use log::trace;

    use kf_protocol::Encoder;
    use kf_protocol::Decoder;
    use kf_protocol::Version;
    use kf_protocol::bytes::{Buf, BufMut};


    use crate::core::*;
    
    use super::*;

    /// this is not real spec but is there to allow passing of parameters
    impl Spec for CustomSpuSpec {
        const LABEL: &'static str = "CustomSpu";
        type IndexKey  = String;
        type Status = SpuStatus;
        type Owner = SpuSpec;
    }

    impl Removable for CustomSpuSpec {
        type DeleteKey = CustomSpuKey;
    }

    impl Creatable for CustomSpuSpec {}

    // This can be auto generated by enum derive later
    #[derive(Debug)]
    pub enum CustomSpuKey {
        Name(String),
        Id(i32)
    }

    impl CustomSpuKey {
        fn type_string(&self) -> &'static str {
            match self {
                Self::Name(_) => "Name",
                Self::Id(_) => "Id"
            }
        }
    }

    impl Default for CustomSpuKey {
        fn default() -> Self {
            Self::Id(0)
        }
    
    }


    impl Encoder for CustomSpuKey {
    
        fn write_size(&self, version: Version) -> usize {
            let type_size = self.type_string().to_owned().write_size(version);
        
            type_size
                + match self {
                    Self::Name(s) => s.write_size(version),
                    Self::Id(s) => s.write_size(version),
                }
        }

        // encode match
        fn encode<T>(&self, dest: &mut T, version: Version) -> Result<(), Error>
        where
            T: BufMut,
        {

            self.type_string().to_owned().encode(dest,version)?;

            match self {
                Self::Name(s) => s.encode(dest, version)?,
                Self::Id(s) => s.encode(dest, version)?,
            }

            Ok(())
        }
    }

    impl Decoder for CustomSpuKey {
        fn decode<T>(&mut self, src: &mut T, version: Version) -> Result<(), Error>
        where
            T: Buf,
        {
            let mut typ = "".to_owned();
            typ.decode(src, version)?;
            trace!("decoded type: {}", typ);

            match typ.as_ref() {
                "Name" => {
                    let mut response = String::default();
                    response.decode(src, version)?;
                    *self = Self::Name(response);
                    Ok(())
                },

                "Id" => {
                    let mut response: i32 = 9;
                    response.decode(src, version)?;
                    *self = Self::Id(response);
                    Ok(())
                },


                // Unexpected type
                _ => Err(Error::new(
                    ErrorKind::InvalidData,
                    format!("invalid spec type {}", typ),
                )),
            }
        }
    }
}