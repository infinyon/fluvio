use quantities::datathroughput::DataThroughput;
use quantities::datavolume::DataVolume;
use quantities::duration::{Duration as QuantDuration};

#[derive(Debug, Clone, Copy)]
pub enum ClientStatsMetricFormat {
    StartTime(i64),
    RunTime(QuantDuration),
    Pid(u32),
    Offset(i32),
    LastBatches(u64),
    LastBytes(DataVolume),
    LastLatency(QuantDuration),
    LastRecords(u64),
    LastThroughput(DataThroughput),
    LastUpdated(i64),
    Batches(u64),
    Bytes(DataVolume),
    Cpu(f32),
    Mem(DataVolume),
    Latency(QuantDuration),
    Records(u64),
    Throughput(DataThroughput),
    SecondBatches(u64),
    SecondLatency(QuantDuration),
    SecondRecords(u64),
    SecondThroughput(DataVolume),
    SecondMeanLatency(QuantDuration),
    SecondMeanThroughput(DataThroughput),
    MaxThroughput(DataThroughput),
    MeanThroughput(DataThroughput),
    MeanLatency(QuantDuration),
    StdDevLatency(QuantDuration),
    P50Latency(QuantDuration),
    P90Latency(QuantDuration),
    P99Latency(QuantDuration),
    P999Latency(QuantDuration),
}

impl ClientStatsMetricFormat {
    pub fn value_to_string(&self) -> String {
        match self {
            Self::StartTime(n) => n.to_string(),
            Self::RunTime(n) => format!("{:<15.3}", n),
            Self::Pid(n) => n.to_string(),
            Self::Offset(n) => n.to_string(),
            Self::LastBatches(n) => n.to_string(),
            Self::LastBytes(n) => format!("{:<15.3}", n),
            Self::LastLatency(n) => format!("{:<15.3}", n),
            Self::LastRecords(n) => n.to_string(),
            Self::LastThroughput(n) => format!("{:<15.3}", n),
            Self::LastUpdated(n) => n.to_string(),
            Self::Batches(n) => n.to_string(),
            Self::Bytes(n) => format!("{:<15.3}", n),
            Self::Cpu(n) => n.to_string(),
            Self::Mem(n) => format!("{:<15.3}", n),
            Self::Latency(n) => format!("{:<15.3}", n),
            Self::Records(n) => n.to_string(),
            Self::Throughput(n) => format!("{:<15.3}", n),
            Self::SecondBatches(n) => n.to_string(),
            Self::SecondLatency(n) => format!("{:<15.3}", n),
            Self::SecondRecords(n) => n.to_string(),
            Self::SecondThroughput(n) => format!("{:<15.3}", n),
            Self::SecondMeanLatency(n) => format!("{:<15.3}", n),
            Self::SecondMeanThroughput(n) => format!("{:<15.3}", n),
            Self::MaxThroughput(n) => format!("{:<15.3}", n),
            Self::MeanThroughput(n) => format!("{:<15.3}", n),
            Self::MeanLatency(n) => format!("{:<15.3}", n),
            Self::StdDevLatency(n) => format!("{:<15.3}", n),
            Self::P50Latency(n) => format!("{:<15.3}", n),
            Self::P90Latency(n) => format!("{:<15.3}", n),
            Self::P99Latency(n) => format!("{:<15.3}", n),
            Self::P999Latency(n) => format!("{:<15.3}", n),
        }
    }
}
