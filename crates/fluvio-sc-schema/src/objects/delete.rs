//!
//! # Delete object
//!
//!

use std::fmt::Debug;

use anyhow::Result;

use fluvio_protocol::{Encoder, Decoder};
use fluvio_protocol::api::Request;

use crate::{DeletableAdminSpec};
use crate::Status;
use crate::AdminPublicApiKey;
use super::{COMMON_VERSION, TypeBuffer};

#[derive(Debug, Default, Encoder, Decoder)]
pub struct DeleteRequest<S: DeletableAdminSpec> {
    key: S::DeleteKey,
}

impl<S> DeleteRequest<S>
where
    S: DeletableAdminSpec,
{
    pub fn new(key: S::DeleteKey) -> Self {
        Self { key }
    }

    pub fn key(self) -> S::DeleteKey {
        self.key
    }
}

// This can be auto generated by enum derive later
#[derive(Debug, Default, Encoder, Decoder)]
pub struct ObjectApiDeleteRequest(TypeBuffer);

impl ObjectApiDeleteRequest {
    pub fn encode<S>(input: DeleteRequest<S>) -> Result<Self>
    where
        S: DeletableAdminSpec,
    {
        Ok(Self(TypeBuffer::encode::<S, _>(input)?))
    }

    pub fn downcast<S>(&self) -> Result<Option<DeleteRequest<S>>>
    where
        S: DeletableAdminSpec,
    {
        self.0.downcast::<S, _>()
    }
}

impl Request for ObjectApiDeleteRequest {
    const API_KEY: u16 = AdminPublicApiKey::Delete as u16;
    const MIN_API_VERSION: i16 = 1; // previous version
    const DEFAULT_API_VERSION: i16 = COMMON_VERSION;
    type Response = Status;
}
